;;; this file is automatically generated, do not edit
#||
Copyright (c) 2015-2016 The Khronos Group Inc.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and/or associated documentation files (the
"Materials"), to deal in the Materials without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Materials, and to
permit persons to whom the Materials are furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Materials.

THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

------------------------------------------------------------------------
||#

(in-package #:cl-vulkan-bindings)

(defbitfield (access-flags flags)
  (:indirect-command-read #x1) ;; Controls coherency of indirect command reads
  (:index-read #x2) ;; Controls coherency of index reads
  (:vertex-attribute-read #x4) ;; Controls coherency of vertex attribute reads
  (:uniform-read #x8) ;; Controls coherency of uniform buffer reads
  (:input-attachment-read #x10) ;; Controls coherency of input attachment reads
  (:shader-read #x20) ;; Controls coherency of shader reads
  (:shader-write #x40) ;; Controls coherency of shader writes
  (:color-attachment-read #x80) ;; Controls coherency of color attachment reads
  (:color-attachment-write #x100) ;; Controls coherency of color attachment writes
  (:depth-stencil-attachment-read #x200) ;; Controls coherency of depth/stencil attachment reads
  (:depth-stencil-attachment-write #x400) ;; Controls coherency of depth/stencil attachment writes
  (:transfer-read #x800) ;; Controls coherency of transfer reads
  (:transfer-write #x1000) ;; Controls coherency of transfer writes
  (:host-read #x2000) ;; Controls coherency of host reads
  (:host-write #x4000) ;; Controls coherency of host writes
  (:memory-read #x8000) ;; Controls coherency of memory reads
  (:memory-write #x10000)) ;; Controls coherency of memory writes

(defbitfield (android-surface-create-flags-khr flags))

(defbitfield (attachment-description-flags flags)
  (:may-alias #x1)) ;; The attachment may alias physical memory of another attachment in the same render pass

(defbitfield (buffer-create-flags flags)
  (:sparse-binding #x1) ;; Buffer should support sparse backing
  (:sparse-residency #x2) ;; Buffer should support sparse backing with partial residency
  (:sparse-aliased #x4)) ;; Buffer should support constent data access to physical memory blocks mapped into multiple locations of sparse buffers

(defbitfield (buffer-usage-flags flags)
  (:transfer-src #x1) ;; Can be used as a source of transfer operations
  (:transfer-dst #x2) ;; Can be used as a destination of transfer operations
  (:uniform-texel-buffer #x4) ;; Can be used as TBO
  (:storage-texel-buffer #x8) ;; Can be used as IBO
  (:uniform-buffer #x10) ;; Can be used as UBO
  (:storage-buffer #x20) ;; Can be used as SSBO
  (:index-buffer #x40) ;; Can be used as source of fixed-function index fetch (index buffer)
  (:vertex-buffer #x80) ;; Can be used as source of fixed-function vertex fetch (VBO)
  (:indirect-buffer #x100)) ;; Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)

(defbitfield (buffer-view-create-flags flags))

(defbitfield (color-component-flags flags)
  (:r #x1)
  (:g #x2)
  (:b #x4)
  (:a #x8))

(defbitfield (command-buffer-reset-flags flags)
  (:release-resources #x1)) ;; Release resources owned by the buffer

(defbitfield (command-buffer-usage-flags flags)
  (:one-time-submit #x1)
  (:render-pass-continue #x2)
  (:simultaneous-use #x4)) ;; Command buffer may be submitted/executed more than once simultaneously

(defbitfield (command-pool-create-flags flags)
  (:transient #x1) ;; Command buffers have a short lifetime
  (:reset-command-buffer #x2)) ;; Command buffers may release their memory individually

(defbitfield (command-pool-reset-flags flags)
  (:release-resources #x1)) ;; Release resources owned by the pool

(defbitfield (composite-alpha-flags-khr flags)
  (:opaque #x1)
  (:pre-multiplied #x2)
  (:post-multiplied #x4)
  (:inherit #x8))

(defbitfield (cull-mode-flags flags)
  (:none #x0)
  (:front #x1)
  (:back #x2)
  (:front-and-back #x3))

(defbitfield (debug-report-flags-ext flags)
  (:information #x1)
  (:warning #x2)
  (:performance-warning #x4)
  (:error #x8)
  (:debug #x10))

(defbitfield (dependency-flags flags)
  (:by-region #x1)) ;; Dependency is per pixel region

(defbitfield (descriptor-pool-create-flags flags)
  (:free-descriptor-set #x1)) ;; Descriptor sets may be freed individually

(defbitfield (descriptor-pool-reset-flags flags))

(defbitfield (descriptor-set-layout-create-flags flags))

(defbitfield (device-create-flags flags))

(defbitfield (device-queue-create-flags flags))

(defbitfield (display-mode-create-flags-khr flags))

(defbitfield (display-plane-alpha-flags-khr flags)
  (:opaque #x1)
  (:global #x2)
  (:per-pixel #x4)
  (:per-pixel-premultiplied #x8))

(defbitfield (display-surface-create-flags-khr flags))

(defbitfield (event-create-flags flags))

(defbitfield (fence-create-flags flags)
  (:signaled #x1))

(defbitfield (format-feature-flags flags)
  (:sampled-image #x1) ;; Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
  (:storage-image #x2) ;; Format can be used for storage images (STORAGE_IMAGE descriptor type)
  (:storage-image-atomic #x4) ;; Format supports atomic operations in case it's used for storage images
  (:uniform-texel-buffer #x8) ;; Format can be used for uniform texel buffers (TBOs)
  (:storage-texel-buffer #x10) ;; Format can be used for storage texel buffers (IBOs)
  (:storage-texel-buffer-atomic #x20) ;; Format supports atomic operations in case it's used for storage texel buffers
  (:vertex-buffer #x40) ;; Format can be used for vertex buffers (VBOs)
  (:color-attachment #x80) ;; Format can be used for color attachment images
  (:color-attachment-blend #x100) ;; Format supports blending in case it's used for color attachment images
  (:depth-stencil-attachment #x200) ;; Format can be used for depth/stencil attachment images
  (:blit-src #x400) ;; Format can be used as the source image of blits with vkCmdBlitImage
  (:blit-dst #x800) ;; Format can be used as the destination image of blits with vkCmdBlitImage
  (:sampled-image-filter-linear #x1000)) ;; Format can be filtered with VK_FILTER_LINEAR when being sampled

(defbitfield (framebuffer-create-flags flags))

(defbitfield (image-aspect-flags flags)
  (:color #x1)
  (:depth #x2)
  (:stencil #x4)
  (:metadata #x8))

(defbitfield (image-create-flags flags)
  (:sparse-binding #x1) ;; Image should support sparse backing
  (:sparse-residency #x2) ;; Image should support sparse backing with partial residency
  (:sparse-aliased #x4) ;; Image should support constent data access to physical memory blocks mapped into multiple locations of sparse images
  (:mutable-format #x8) ;; Allows image views to have different format than the base image
  (:cube-compatible #x10)) ;; Allows creating image views with cube type from the created image

(defbitfield (image-usage-flags flags)
  (:transfer-src #x1) ;; Can be used as a source of transfer operations
  (:transfer-dst #x2) ;; Can be used as a destination of transfer operations
  (:sampled #x4) ;; Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
  (:storage #x8) ;; Can be used as storage image (STORAGE_IMAGE descriptor type)
  (:color-attachment #x10) ;; Can be used as framebuffer color attachment
  (:depth-stencil-attachment #x20) ;; Can be used as framebuffer depth/stencil attachment
  (:transient-attachment #x40) ;; Image data not needed outside of rendering
  (:input-attachment #x80)) ;; Can be used as framebuffer input attachment

(defbitfield (image-view-create-flags flags))

(defbitfield (instance-create-flags flags))

(defbitfield (memory-heap-flags flags)
  (:device-local #x1)) ;; If set, heap represents device memory

(defbitfield (memory-map-flags flags))

(defbitfield (memory-property-flags flags)
  (:device-local #x1) ;; If otherwise stated, then allocate memory on device
  (:host-visible #x2) ;; Memory is mappable by host
  (:host-coherent #x4) ;; Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache
  (:host-cached #x8) ;; Memory will be cached by the host
  (:lazily-allocated #x10)) ;; Memory may be allocated by the driver when it is required

(defbitfield (mir-surface-create-flags-khr flags))

(defbitfield (pipeline-cache-create-flags flags))

(defbitfield (pipeline-color-blend-state-create-flags flags))

(defbitfield (pipeline-create-flags flags)
  (:disable-optimization #x1)
  (:allow-derivatives #x2)
  (:derivative #x4))

(defbitfield (pipeline-depth-stencil-state-create-flags flags))

(defbitfield (pipeline-dynamic-state-create-flags flags))

(defbitfield (pipeline-input-assembly-state-create-flags flags))

(defbitfield (pipeline-layout-create-flags flags))

(defbitfield (pipeline-multisample-state-create-flags flags))

(defbitfield (pipeline-rasterization-state-create-flags flags))

(defbitfield (pipeline-shader-stage-create-flags flags))

(defbitfield (pipeline-stage-flags flags)
  (:top-of-pipe #x1) ;; Before subsequent commands are processed
  (:draw-indirect #x2) ;; Draw/DispatchIndirect command fetch
  (:vertex-input #x4) ;; Vertex/index fetch
  (:vertex-shader #x8) ;; Vertex shading
  (:tessellation-control-shader #x10) ;; Tessellation control shading
  (:tessellation-evaluation-shader #x20) ;; Tessellation evaluation shading
  (:geometry-shader #x40) ;; Geometry shading
  (:fragment-shader #x80) ;; Fragment shading
  (:early-fragment-tests #x100) ;; Early fragment (depth and stencil) tests
  (:late-fragment-tests #x200) ;; Late fragment (depth and stencil) tests
  (:color-attachment-output #x400) ;; Color attachment writes
  (:compute-shader #x800) ;; Compute shading
  (:transfer #x1000) ;; Transfer/copy operations
  (:bottom-of-pipe #x2000) ;; After previous commands have completed
  (:host #x4000) ;; Indicates host (CPU) is a source/sink of the dependency
  (:all-graphics #x8000) ;; All stages of the graphics pipeline
  (:all-commands #x10000)) ;; All stages supported on the queue

(defbitfield (pipeline-tessellation-state-create-flags flags))

(defbitfield (pipeline-vertex-input-state-create-flags flags))

(defbitfield (pipeline-viewport-state-create-flags flags))

(defbitfield (query-control-flags flags)
  (:precise #x1)) ;; Require precise results to be collected by the query

(defbitfield (query-pipeline-statistic-flags flags)
  (:input-assembly-vertices #x1) ;; Optional
  (:input-assembly-primitives #x2) ;; Optional
  (:vertex-shader-invocations #x4) ;; Optional
  (:geometry-shader-invocations #x8) ;; Optional
  (:geometry-shader-primitives #x10) ;; Optional
  (:clipping-invocations #x20) ;; Optional
  (:clipping-primitives #x40) ;; Optional
  (:fragment-shader-invocations #x80) ;; Optional
  (:tessellation-control-shader-patches #x100) ;; Optional
  (:tessellation-evaluation-shader-invocations #x200) ;; Optional
  (:compute-shader-invocations #x400)) ;; Optional

(defbitfield (query-pool-create-flags flags))

(defbitfield (query-result-flags flags)
  (:64 #x1) ;; Results of the queries are written to the destination buffer as 64-bit values
  (:wait #x2) ;; Results of the queries are waited on before proceeding with the result copy
  (:with-availability #x4) ;; Besides the results of the query, the availability of the results is also written
  (:partial #x8)) ;; Copy the partial results of the query even if the final results aren't available

(defbitfield (queue-flags flags)
  (:graphics #x1) ;; Queue supports graphics operations
  (:compute #x2) ;; Queue supports compute operations
  (:transfer #x4) ;; Queue supports transfer operations
  (:sparse-binding #x8)) ;; Queue supports sparse resource memory management operations

(defbitfield (render-pass-create-flags flags))

(defbitfield (sample-count-flags flags)
  (:1 #x1) ;; Sample count 1 supported
  (:2 #x2) ;; Sample count 2 supported
  (:4 #x4) ;; Sample count 4 supported
  (:8 #x8) ;; Sample count 8 supported
  (:16 #x10) ;; Sample count 16 supported
  (:32 #x20) ;; Sample count 32 supported
  (:64 #x40)) ;; Sample count 64 supported

(defbitfield (sampler-create-flags flags))

(defbitfield (semaphore-create-flags flags))

(defbitfield (shader-module-create-flags flags))

(defbitfield (shader-stage-flags flags)
  (:vertex #x1)
  (:tessellation-control #x2)
  (:tessellation-evaluation #x4)
  (:geometry #x8)
  (:fragment #x10)
  (:compute #x20)
  (:all-graphics #x1F)
  (:all #x7FFFFFFF))

(defbitfield (sparse-image-format-flags flags)
  (:single-miptail #x1) ;; Image uses a single miptail region for all array layers
  (:aligned-mip-size #x2) ;; Image requires mip levels to be an exact multiple of the sparse image block size for non-miptail levels.
  (:nonstandard-block-size #x4)) ;; Image uses a non-standard sparse block size

(defbitfield (sparse-memory-bind-flags flags)
  (:metadata #x1)) ;; Operation binds resource metadata to memory

(defbitfield (stencil-face-flags flags)
  (:front #x1) ;; Front face
  (:back #x2) ;; Back face
  (:vk-stencil-front-and-back #x3)) ;; Front and back faces

(defbitfield (subpass-description-flags flags))

(defbitfield (surface-transform-flags-khr flags)
  (:identity #x1)
  (:rotate-90 #x2)
  (:rotate-180 #x4)
  (:rotate-270 #x8)
  (:horizontal-mirror #x10)
  (:horizontal-mirror-rotate-90 #x20)
  (:horizontal-mirror-rotate-180 #x40)
  (:horizontal-mirror-rotate-270 #x80)
  (:inherit #x100))

(defbitfield (swapchain-create-flags-khr flags))

(defbitfield (wayland-surface-create-flags-khr flags))

(defbitfield (win-3-2-surface-create-flags-khr flags))

(defbitfield (xcb-surface-create-flags-khr flags))

(defbitfield (xlib-surface-create-flags-khr flags))

