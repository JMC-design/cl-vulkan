;;; this file is automatically generated, do not edit
#||
Copyright (c) 2015-2016 The Khronos Group Inc.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and/or associated documentation files (the
"Materials"), to deal in the Materials without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Materials, and to
permit persons to whom the Materials are furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Materials.

THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

------------------------------------------------------------------------
||#

(in-package #:cl-vulkan-bindings)

(defparameter *extension-names*
  (alexandria:plist-hash-table
    '(:nv-extension-1 "VK_NV_extension_1"
     :nv-extension-0 "VK_NV_extension_0"
     :ext-debug-report "VK_EXT_debug_report"
     :khr-win32-surface "VK_KHR_win32_surface"
     :khr-android-surface "VK_KHR_android_surface"
     :khr-mir-surface "VK_KHR_mir_surface"
     :khr-wayland-surface "VK_KHR_wayland_surface"
     :khr-xcb-surface "VK_KHR_xcb_surface"
     :khr-xlib-surface "VK_KHR_xlib_surface"
     :khr-display-swapchain "VK_KHR_display_swapchain"
     :khr-display "VK_KHR_display"
     :khr-swapchain "VK_KHR_swapchain"
     :khr-surface "VK_KHR_surface")))

(defctype sample-mask :uint32)

(defctype bool32 :uint32)

(defctype flags :uint32)

(defctype device-size :uint64)

(defctype handle :pointer)
#.(if (= 8 (foreign-type-size :pointer))
  '(defctype non-dispatch-handle :pointer)
  '(defctype non-dispatch-handle :uint64))

(defctype a-native-window :void)

(defctype mir-connection :void)

(defctype mir-surface :void)

(defctype xcb_connection_t :void)

(defctype display :void)

(defctype hinstance (:pointer :void))

(defctype hwnd (:pointer :void))

(defctype xcb_window_t :uint32)

(defctype xcb_visualid_t :uint32)

(defctype window :ulong)

(defctype visual-id :ulong)

(defcstruct wl_display)

(defcstruct wl_surface)

(defctype instance handle)

(defctype physical-device handle)

(defctype device handle)

(defctype queue handle)

(defctype command-buffer handle)

(defctype device-memory non-dispatch-handle)

(defctype command-pool non-dispatch-handle)

(defctype buffer non-dispatch-handle)

(defctype buffer-view non-dispatch-handle)

(defctype image non-dispatch-handle)

(defctype image-view non-dispatch-handle)

(defctype shader-module non-dispatch-handle)

(defctype pipeline non-dispatch-handle)

(defctype pipeline-layout non-dispatch-handle)

(defctype sampler non-dispatch-handle)

(defctype descriptor-set non-dispatch-handle)

(defctype descriptor-set-layout non-dispatch-handle)

(defctype descriptor-pool non-dispatch-handle)

(defctype fence non-dispatch-handle)

(defctype semaphore non-dispatch-handle)

(defctype event non-dispatch-handle)

(defctype query-pool non-dispatch-handle)

(defctype framebuffer non-dispatch-handle)

(defctype render-pass non-dispatch-handle)

(defctype pipeline-cache non-dispatch-handle)

(defctype display-khr non-dispatch-handle)

(defctype display-mode-khr non-dispatch-handle)

(defctype surface-khr non-dispatch-handle)

(defctype swapchain-khr non-dispatch-handle)

(defctype debug-report-callback-ext non-dispatch-handle)

(defbitfield (access-flag-bits)
  (:indirect-command-read #x1) ;; Controls coherency of indirect command reads
  (:index-read #x2) ;; Controls coherency of index reads
  (:vertex-attribute-read #x4) ;; Controls coherency of vertex attribute reads
  (:uniform-read #x8) ;; Controls coherency of uniform buffer reads
  (:input-attachment-read #x10) ;; Controls coherency of input attachment reads
  (:shader-read #x20) ;; Controls coherency of shader reads
  (:shader-write #x40) ;; Controls coherency of shader writes
  (:color-attachment-read #x80) ;; Controls coherency of color attachment reads
  (:color-attachment-write #x100) ;; Controls coherency of color attachment writes
  (:depth-stencil-attachment-read #x200) ;; Controls coherency of depth/stencil attachment reads
  (:depth-stencil-attachment-write #x400) ;; Controls coherency of depth/stencil attachment writes
  (:transfer-read #x800) ;; Controls coherency of transfer reads
  (:transfer-write #x1000) ;; Controls coherency of transfer writes
  (:host-read #x2000) ;; Controls coherency of host reads
  (:host-write #x4000) ;; Controls coherency of host writes
  (:memory-read #x8000) ;; Controls coherency of memory reads
  (:memory-write #x10000)) ;; Controls coherency of memory writes

(defbitfield (access-flags)
  (:indirect-command-read #x1) ;; Controls coherency of indirect command reads
  (:index-read #x2) ;; Controls coherency of index reads
  (:vertex-attribute-read #x4) ;; Controls coherency of vertex attribute reads
  (:uniform-read #x8) ;; Controls coherency of uniform buffer reads
  (:input-attachment-read #x10) ;; Controls coherency of input attachment reads
  (:shader-read #x20) ;; Controls coherency of shader reads
  (:shader-write #x40) ;; Controls coherency of shader writes
  (:color-attachment-read #x80) ;; Controls coherency of color attachment reads
  (:color-attachment-write #x100) ;; Controls coherency of color attachment writes
  (:depth-stencil-attachment-read #x200) ;; Controls coherency of depth/stencil attachment reads
  (:depth-stencil-attachment-write #x400) ;; Controls coherency of depth/stencil attachment writes
  (:transfer-read #x800) ;; Controls coherency of transfer reads
  (:transfer-write #x1000) ;; Controls coherency of transfer writes
  (:host-read #x2000) ;; Controls coherency of host reads
  (:host-write #x4000) ;; Controls coherency of host writes
  (:memory-read #x8000) ;; Controls coherency of memory reads
  (:memory-write #x10000)) ;; Controls coherency of memory writes

(defbitfield (android-surface-create-flags-khr))

(defbitfield (attachment-description-flag-bits)
  (:may-alias #x1)) ;; The attachment may alias physical memory of another attachment in the same render pass

(defbitfield (attachment-description-flags)
  (:may-alias #x1)) ;; The attachment may alias physical memory of another attachment in the same render pass

(defbitfield (buffer-create-flag-bits)
  (:sparse-binding #x1) ;; Buffer should support sparse backing
  (:sparse-residency #x2) ;; Buffer should support sparse backing with partial residency
  (:sparse-aliased #x4)) ;; Buffer should support constent data access to physical memory blocks mapped into multiple locations of sparse buffers

(defbitfield (buffer-create-flags)
  (:sparse-binding #x1) ;; Buffer should support sparse backing
  (:sparse-residency #x2) ;; Buffer should support sparse backing with partial residency
  (:sparse-aliased #x4)) ;; Buffer should support constent data access to physical memory blocks mapped into multiple locations of sparse buffers

(defbitfield (buffer-usage-flag-bits)
  (:transfer-src #x1) ;; Can be used as a source of transfer operations
  (:transfer-dst #x2) ;; Can be used as a destination of transfer operations
  (:uniform-texel-buffer #x4) ;; Can be used as TBO
  (:storage-texel-buffer #x8) ;; Can be used as IBO
  (:uniform-buffer #x10) ;; Can be used as UBO
  (:storage-buffer #x20) ;; Can be used as SSBO
  (:index-buffer #x40) ;; Can be used as source of fixed-function index fetch (index buffer)
  (:vertex-buffer #x80) ;; Can be used as source of fixed-function vertex fetch (VBO)
  (:indirect-buffer #x100)) ;; Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)

(defbitfield (buffer-usage-flags)
  (:transfer-src #x1) ;; Can be used as a source of transfer operations
  (:transfer-dst #x2) ;; Can be used as a destination of transfer operations
  (:uniform-texel-buffer #x4) ;; Can be used as TBO
  (:storage-texel-buffer #x8) ;; Can be used as IBO
  (:uniform-buffer #x10) ;; Can be used as UBO
  (:storage-buffer #x20) ;; Can be used as SSBO
  (:index-buffer #x40) ;; Can be used as source of fixed-function index fetch (index buffer)
  (:vertex-buffer #x80) ;; Can be used as source of fixed-function vertex fetch (VBO)
  (:indirect-buffer #x100)) ;; Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)

(defbitfield (buffer-view-create-flags))

(defbitfield (color-component-flag-bits)
  (:r #x1)
  (:g #x2)
  (:b #x4)
  (:a #x8))

(defbitfield (color-component-flags)
  (:r #x1)
  (:g #x2)
  (:b #x4)
  (:a #x8))

(defbitfield (command-buffer-reset-flag-bits)
  (:release-resources #x1)) ;; Release resources owned by the buffer

(defbitfield (command-buffer-reset-flags)
  (:release-resources #x1)) ;; Release resources owned by the buffer

(defbitfield (command-buffer-usage-flag-bits)
  (:one-time-submit #x1)
  (:render-pass-continue #x2)
  (:simultaneous-use #x4)) ;; Command buffer may be submitted/executed more than once simultaneously

(defbitfield (command-buffer-usage-flags)
  (:one-time-submit #x1)
  (:render-pass-continue #x2)
  (:simultaneous-use #x4)) ;; Command buffer may be submitted/executed more than once simultaneously

(defbitfield (command-pool-create-flag-bits)
  (:transient #x1) ;; Command buffers have a short lifetime
  (:reset-command-buffer #x2)) ;; Command buffers may release their memory individually

(defbitfield (command-pool-create-flags)
  (:transient #x1) ;; Command buffers have a short lifetime
  (:reset-command-buffer #x2)) ;; Command buffers may release their memory individually

(defbitfield (command-pool-reset-flag-bits)
  (:release-resources #x1)) ;; Release resources owned by the pool

(defbitfield (command-pool-reset-flags)
  (:release-resources #x1)) ;; Release resources owned by the pool

(defbitfield (composite-alpha-flag-bits-khr)
  (:opaque #x1)
  (:pre-multiplied #x2)
  (:post-multiplied #x4)
  (:inherit #x8))

(defbitfield (composite-alpha-flags-khr)
  (:opaque #x1)
  (:pre-multiplied #x2)
  (:post-multiplied #x4)
  (:inherit #x8))

(defbitfield (cull-mode-flag-bits)
  (:none #x0)
  (:front #x1)
  (:back #x2)
  (:front-and-back #x3))

(defbitfield (cull-mode-flags)
  (:none #x0)
  (:front #x1)
  (:back #x2)
  (:front-and-back #x3))

(defbitfield (debug-report-flag-bits-ext)
  (:information #x1)
  (:warning #x2)
  (:performance-warning #x4)
  (:error #x8)
  (:debug #x10))

(defbitfield (debug-report-flags-ext)
  (:information #x1)
  (:warning #x2)
  (:performance-warning #x4)
  (:error #x8)
  (:debug #x10))

(defbitfield (dependency-flag-bits)
  (:by-region #x1)) ;; Dependency is per pixel region

(defbitfield (dependency-flags)
  (:by-region #x1)) ;; Dependency is per pixel region

(defbitfield (descriptor-pool-create-flag-bits)
  (:free-descriptor-set #x1)) ;; Descriptor sets may be freed individually

(defbitfield (descriptor-pool-create-flags)
  (:free-descriptor-set #x1)) ;; Descriptor sets may be freed individually

(defbitfield (descriptor-pool-reset-flags))

(defbitfield (descriptor-set-layout-create-flags))

(defbitfield (device-create-flags))

(defbitfield (device-queue-create-flags))

(defbitfield (display-mode-create-flags-khr))

(defbitfield (display-plane-alpha-flag-bits-khr)
  (:opaque #x1)
  (:global #x2)
  (:per-pixel #x4)
  (:per-pixel-premultiplied #x8))

(defbitfield (display-plane-alpha-flags-khr)
  (:opaque #x1)
  (:global #x2)
  (:per-pixel #x4)
  (:per-pixel-premultiplied #x8))

(defbitfield (display-surface-create-flags-khr))

(defbitfield (event-create-flags))

(defbitfield (fence-create-flag-bits)
  (:signaled #x1))

(defbitfield (fence-create-flags)
  (:signaled #x1))

(defbitfield (format-feature-flag-bits)
  (:sampled-image #x1) ;; Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
  (:storage-image #x2) ;; Format can be used for storage images (STORAGE_IMAGE descriptor type)
  (:storage-image-atomic #x4) ;; Format supports atomic operations in case it's used for storage images
  (:uniform-texel-buffer #x8) ;; Format can be used for uniform texel buffers (TBOs)
  (:storage-texel-buffer #x10) ;; Format can be used for storage texel buffers (IBOs)
  (:storage-texel-buffer-atomic #x20) ;; Format supports atomic operations in case it's used for storage texel buffers
  (:vertex-buffer #x40) ;; Format can be used for vertex buffers (VBOs)
  (:color-attachment #x80) ;; Format can be used for color attachment images
  (:color-attachment-blend #x100) ;; Format supports blending in case it's used for color attachment images
  (:depth-stencil-attachment #x200) ;; Format can be used for depth/stencil attachment images
  (:blit-src #x400) ;; Format can be used as the source image of blits with vkCmdBlitImage
  (:blit-dst #x800) ;; Format can be used as the destination image of blits with vkCmdBlitImage
  (:sampled-image-filter-linear #x1000)) ;; Format can be filtered with VK_FILTER_LINEAR when being sampled

(defbitfield (format-feature-flags)
  (:sampled-image #x1) ;; Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
  (:storage-image #x2) ;; Format can be used for storage images (STORAGE_IMAGE descriptor type)
  (:storage-image-atomic #x4) ;; Format supports atomic operations in case it's used for storage images
  (:uniform-texel-buffer #x8) ;; Format can be used for uniform texel buffers (TBOs)
  (:storage-texel-buffer #x10) ;; Format can be used for storage texel buffers (IBOs)
  (:storage-texel-buffer-atomic #x20) ;; Format supports atomic operations in case it's used for storage texel buffers
  (:vertex-buffer #x40) ;; Format can be used for vertex buffers (VBOs)
  (:color-attachment #x80) ;; Format can be used for color attachment images
  (:color-attachment-blend #x100) ;; Format supports blending in case it's used for color attachment images
  (:depth-stencil-attachment #x200) ;; Format can be used for depth/stencil attachment images
  (:blit-src #x400) ;; Format can be used as the source image of blits with vkCmdBlitImage
  (:blit-dst #x800) ;; Format can be used as the destination image of blits with vkCmdBlitImage
  (:sampled-image-filter-linear #x1000)) ;; Format can be filtered with VK_FILTER_LINEAR when being sampled

(defbitfield (framebuffer-create-flags))

(defbitfield (image-aspect-flag-bits)
  (:color #x1)
  (:depth #x2)
  (:stencil #x4)
  (:metadata #x8))

(defbitfield (image-aspect-flags)
  (:color #x1)
  (:depth #x2)
  (:stencil #x4)
  (:metadata #x8))

(defbitfield (image-create-flag-bits)
  (:sparse-binding #x1) ;; Image should support sparse backing
  (:sparse-residency #x2) ;; Image should support sparse backing with partial residency
  (:sparse-aliased #x4) ;; Image should support constent data access to physical memory blocks mapped into multiple locations of sparse images
  (:mutable-format #x8) ;; Allows image views to have different format than the base image
  (:cube-compatible #x10)) ;; Allows creating image views with cube type from the created image

(defbitfield (image-create-flags)
  (:sparse-binding #x1) ;; Image should support sparse backing
  (:sparse-residency #x2) ;; Image should support sparse backing with partial residency
  (:sparse-aliased #x4) ;; Image should support constent data access to physical memory blocks mapped into multiple locations of sparse images
  (:mutable-format #x8) ;; Allows image views to have different format than the base image
  (:cube-compatible #x10)) ;; Allows creating image views with cube type from the created image

(defbitfield (image-usage-flag-bits)
  (:transfer-src #x1) ;; Can be used as a source of transfer operations
  (:transfer-dst #x2) ;; Can be used as a destination of transfer operations
  (:sampled #x4) ;; Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
  (:storage #x8) ;; Can be used as storage image (STORAGE_IMAGE descriptor type)
  (:color-attachment #x10) ;; Can be used as framebuffer color attachment
  (:depth-stencil-attachment #x20) ;; Can be used as framebuffer depth/stencil attachment
  (:transient-attachment #x40) ;; Image data not needed outside of rendering
  (:input-attachment #x80)) ;; Can be used as framebuffer input attachment

(defbitfield (image-usage-flags)
  (:transfer-src #x1) ;; Can be used as a source of transfer operations
  (:transfer-dst #x2) ;; Can be used as a destination of transfer operations
  (:sampled #x4) ;; Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
  (:storage #x8) ;; Can be used as storage image (STORAGE_IMAGE descriptor type)
  (:color-attachment #x10) ;; Can be used as framebuffer color attachment
  (:depth-stencil-attachment #x20) ;; Can be used as framebuffer depth/stencil attachment
  (:transient-attachment #x40) ;; Image data not needed outside of rendering
  (:input-attachment #x80)) ;; Can be used as framebuffer input attachment

(defbitfield (image-view-create-flags))

(defbitfield (instance-create-flags))

(defbitfield (memory-heap-flag-bits)
  (:device-local #x1)) ;; If set, heap represents device memory

(defbitfield (memory-heap-flags)
  (:device-local #x1)) ;; If set, heap represents device memory

(defbitfield (memory-map-flags))

(defbitfield (memory-property-flag-bits)
  (:device-local #x1) ;; If otherwise stated, then allocate memory on device
  (:host-visible #x2) ;; Memory is mappable by host
  (:host-coherent #x4) ;; Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache
  (:host-cached #x8) ;; Memory will be cached by the host
  (:lazily-allocated #x10)) ;; Memory may be allocated by the driver when it is required

(defbitfield (memory-property-flags)
  (:device-local #x1) ;; If otherwise stated, then allocate memory on device
  (:host-visible #x2) ;; Memory is mappable by host
  (:host-coherent #x4) ;; Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache
  (:host-cached #x8) ;; Memory will be cached by the host
  (:lazily-allocated #x10)) ;; Memory may be allocated by the driver when it is required

(defbitfield (mir-surface-create-flags-khr))

(defbitfield (pipeline-cache-create-flags))

(defbitfield (pipeline-color-blend-state-create-flags))

(defbitfield (pipeline-create-flag-bits)
  (:disable-optimization #x1)
  (:allow-derivatives #x2)
  (:derivative #x4))

(defbitfield (pipeline-create-flags)
  (:disable-optimization #x1)
  (:allow-derivatives #x2)
  (:derivative #x4))

(defbitfield (pipeline-depth-stencil-state-create-flags))

(defbitfield (pipeline-dynamic-state-create-flags))

(defbitfield (pipeline-input-assembly-state-create-flags))

(defbitfield (pipeline-layout-create-flags))

(defbitfield (pipeline-multisample-state-create-flags))

(defbitfield (pipeline-rasterization-state-create-flags))

(defbitfield (pipeline-shader-stage-create-flags))

(defbitfield (pipeline-stage-flag-bits)
  (:top-of-pipe #x1) ;; Before subsequent commands are processed
  (:draw-indirect #x2) ;; Draw/DispatchIndirect command fetch
  (:vertex-input #x4) ;; Vertex/index fetch
  (:vertex-shader #x8) ;; Vertex shading
  (:tessellation-control-shader #x10) ;; Tessellation control shading
  (:tessellation-evaluation-shader #x20) ;; Tessellation evaluation shading
  (:geometry-shader #x40) ;; Geometry shading
  (:fragment-shader #x80) ;; Fragment shading
  (:early-fragment-tests #x100) ;; Early fragment (depth and stencil) tests
  (:late-fragment-tests #x200) ;; Late fragment (depth and stencil) tests
  (:color-attachment-output #x400) ;; Color attachment writes
  (:compute-shader #x800) ;; Compute shading
  (:transfer #x1000) ;; Transfer/copy operations
  (:bottom-of-pipe #x2000) ;; After previous commands have completed
  (:host #x4000) ;; Indicates host (CPU) is a source/sink of the dependency
  (:all-graphics #x8000) ;; All stages of the graphics pipeline
  (:all-commands #x10000)) ;; All stages supported on the queue

(defbitfield (pipeline-stage-flags)
  (:top-of-pipe #x1) ;; Before subsequent commands are processed
  (:draw-indirect #x2) ;; Draw/DispatchIndirect command fetch
  (:vertex-input #x4) ;; Vertex/index fetch
  (:vertex-shader #x8) ;; Vertex shading
  (:tessellation-control-shader #x10) ;; Tessellation control shading
  (:tessellation-evaluation-shader #x20) ;; Tessellation evaluation shading
  (:geometry-shader #x40) ;; Geometry shading
  (:fragment-shader #x80) ;; Fragment shading
  (:early-fragment-tests #x100) ;; Early fragment (depth and stencil) tests
  (:late-fragment-tests #x200) ;; Late fragment (depth and stencil) tests
  (:color-attachment-output #x400) ;; Color attachment writes
  (:compute-shader #x800) ;; Compute shading
  (:transfer #x1000) ;; Transfer/copy operations
  (:bottom-of-pipe #x2000) ;; After previous commands have completed
  (:host #x4000) ;; Indicates host (CPU) is a source/sink of the dependency
  (:all-graphics #x8000) ;; All stages of the graphics pipeline
  (:all-commands #x10000)) ;; All stages supported on the queue

(defbitfield (pipeline-tessellation-state-create-flags))

(defbitfield (pipeline-vertex-input-state-create-flags))

(defbitfield (pipeline-viewport-state-create-flags))

(defbitfield (query-control-flag-bits)
  (:precise #x1)) ;; Require precise results to be collected by the query

(defbitfield (query-control-flags)
  (:precise #x1)) ;; Require precise results to be collected by the query

(defbitfield (query-pipeline-statistic-flag-bits)
  (:input-assembly-vertices #x1) ;; Optional
  (:input-assembly-primitives #x2) ;; Optional
  (:vertex-shader-invocations #x4) ;; Optional
  (:geometry-shader-invocations #x8) ;; Optional
  (:geometry-shader-primitives #x10) ;; Optional
  (:clipping-invocations #x20) ;; Optional
  (:clipping-primitives #x40) ;; Optional
  (:fragment-shader-invocations #x80) ;; Optional
  (:tessellation-control-shader-patches #x100) ;; Optional
  (:tessellation-evaluation-shader-invocations #x200) ;; Optional
  (:compute-shader-invocations #x400)) ;; Optional

(defbitfield (query-pipeline-statistic-flags)
  (:input-assembly-vertices #x1) ;; Optional
  (:input-assembly-primitives #x2) ;; Optional
  (:vertex-shader-invocations #x4) ;; Optional
  (:geometry-shader-invocations #x8) ;; Optional
  (:geometry-shader-primitives #x10) ;; Optional
  (:clipping-invocations #x20) ;; Optional
  (:clipping-primitives #x40) ;; Optional
  (:fragment-shader-invocations #x80) ;; Optional
  (:tessellation-control-shader-patches #x100) ;; Optional
  (:tessellation-evaluation-shader-invocations #x200) ;; Optional
  (:compute-shader-invocations #x400)) ;; Optional

(defbitfield (query-pool-create-flags))

(defbitfield (query-result-flag-bits)
  (:64 #x1) ;; Results of the queries are written to the destination buffer as 64-bit values
  (:wait #x2) ;; Results of the queries are waited on before proceeding with the result copy
  (:with-availability #x4) ;; Besides the results of the query, the availability of the results is also written
  (:partial #x8)) ;; Copy the partial results of the query even if the final results aren't available

(defbitfield (query-result-flags)
  (:64 #x1) ;; Results of the queries are written to the destination buffer as 64-bit values
  (:wait #x2) ;; Results of the queries are waited on before proceeding with the result copy
  (:with-availability #x4) ;; Besides the results of the query, the availability of the results is also written
  (:partial #x8)) ;; Copy the partial results of the query even if the final results aren't available

(defbitfield (queue-flag-bits)
  (:graphics #x1) ;; Queue supports graphics operations
  (:compute #x2) ;; Queue supports compute operations
  (:transfer #x4) ;; Queue supports transfer operations
  (:sparse-binding #x8)) ;; Queue supports sparse resource memory management operations

(defbitfield (queue-flags)
  (:graphics #x1) ;; Queue supports graphics operations
  (:compute #x2) ;; Queue supports compute operations
  (:transfer #x4) ;; Queue supports transfer operations
  (:sparse-binding #x8)) ;; Queue supports sparse resource memory management operations

(defbitfield (render-pass-create-flags))

(defbitfield (sample-count-flag-bits)
  (:1 #x1) ;; Sample count 1 supported
  (:2 #x2) ;; Sample count 2 supported
  (:4 #x4) ;; Sample count 4 supported
  (:8 #x8) ;; Sample count 8 supported
  (:16 #x10) ;; Sample count 16 supported
  (:32 #x20) ;; Sample count 32 supported
  (:64 #x40)) ;; Sample count 64 supported

(defbitfield (sample-count-flags)
  (:1 #x1) ;; Sample count 1 supported
  (:2 #x2) ;; Sample count 2 supported
  (:4 #x4) ;; Sample count 4 supported
  (:8 #x8) ;; Sample count 8 supported
  (:16 #x10) ;; Sample count 16 supported
  (:32 #x20) ;; Sample count 32 supported
  (:64 #x40)) ;; Sample count 64 supported

(defbitfield (sampler-create-flags))

(defbitfield (semaphore-create-flags))

(defbitfield (shader-module-create-flags))

(defbitfield (shader-stage-flag-bits)
  (:vertex #x1)
  (:tessellation-control #x2)
  (:tessellation-evaluation #x4)
  (:geometry #x8)
  (:fragment #x10)
  (:compute #x20)
  (:all-graphics #x1F)
  (:all #x7FFFFFFF))

(defbitfield (shader-stage-flags)
  (:vertex #x1)
  (:tessellation-control #x2)
  (:tessellation-evaluation #x4)
  (:geometry #x8)
  (:fragment #x10)
  (:compute #x20)
  (:all-graphics #x1F)
  (:all #x7FFFFFFF))

(defbitfield (sparse-image-format-flag-bits)
  (:single-miptail #x1) ;; Image uses a single miptail region for all array layers
  (:aligned-mip-size #x2) ;; Image requires mip levels to be an exact multiple of the sparse image block size for non-miptail levels.
  (:nonstandard-block-size #x4)) ;; Image uses a non-standard sparse block size

(defbitfield (sparse-image-format-flags)
  (:single-miptail #x1) ;; Image uses a single miptail region for all array layers
  (:aligned-mip-size #x2) ;; Image requires mip levels to be an exact multiple of the sparse image block size for non-miptail levels.
  (:nonstandard-block-size #x4)) ;; Image uses a non-standard sparse block size

(defbitfield (sparse-memory-bind-flag-bits)
  (:metadata #x1)) ;; Operation binds resource metadata to memory

(defbitfield (sparse-memory-bind-flags)
  (:metadata #x1)) ;; Operation binds resource metadata to memory

(defbitfield (stencil-face-flag-bits)
  (:front #x1) ;; Front face
  (:back #x2) ;; Back face
  (:vk-stencil-front-and-back #x3)) ;; Front and back faces

(defbitfield (stencil-face-flags)
  (:front #x1) ;; Front face
  (:back #x2) ;; Back face
  (:vk-stencil-front-and-back #x3)) ;; Front and back faces

(defbitfield (subpass-description-flags))

(defbitfield (surface-transform-flag-bits-khr)
  (:identity #x1)
  (:rotate-90 #x2)
  (:rotate-180 #x4)
  (:rotate-270 #x8)
  (:horizontal-mirror #x10)
  (:horizontal-mirror-rotate-90 #x20)
  (:horizontal-mirror-rotate-180 #x40)
  (:horizontal-mirror-rotate-270 #x80)
  (:inherit #x100))

(defbitfield (surface-transform-flags-khr)
  (:identity #x1)
  (:rotate-90 #x2)
  (:rotate-180 #x4)
  (:rotate-270 #x8)
  (:horizontal-mirror #x10)
  (:horizontal-mirror-rotate-90 #x20)
  (:horizontal-mirror-rotate-180 #x40)
  (:horizontal-mirror-rotate-270 #x80)
  (:inherit #x100))

(defbitfield (swapchain-create-flags-khr))

(defbitfield (wayland-surface-create-flags-khr))

(defbitfield (win32-surface-create-flags-khr))

(defbitfield (xcb-surface-create-flags-khr))

(defbitfield (xlib-surface-create-flags-khr))

(defcenum (attachment-load-op)
  (:load #x0)
  (:clear #x1)
  (:dont-care #x2))

(defcenum (attachment-store-op)
  (:store #x0)
  (:dont-care #x1))

(defcenum (blend-factor)
  (:zero #x0)
  (:one #x1)
  (:src-color #x2)
  (:one-minus-src-color #x3)
  (:dst-color #x4)
  (:one-minus-dst-color #x5)
  (:src-alpha #x6)
  (:one-minus-src-alpha #x7)
  (:dst-alpha #x8)
  (:one-minus-dst-alpha #x9)
  (:constant-color #xA)
  (:one-minus-constant-color #xB)
  (:constant-alpha #xC)
  (:one-minus-constant-alpha #xD)
  (:src-alpha-saturate #xE)
  (:src1-color #xF)
  (:one-minus-src1-color #x10)
  (:src1-alpha #x11)
  (:one-minus-src1-alpha #x12))

(defcenum (blend-op)
  (:add #x0)
  (:subtract #x1)
  (:reverse-subtract #x2)
  (:min #x3)
  (:max #x4))

(defcenum (border-color)
  (:float-transparent-black #x0)
  (:int-transparent-black #x1)
  (:float-opaque-black #x2)
  (:int-opaque-black #x3)
  (:float-opaque-white #x4)
  (:int-opaque-white #x5))

(defcenum (color-space-khr)
  (:srgb-nonlinear-khr #x0))

(defcenum (command-buffer-level)
  (:primary #x0)
  (:secondary #x1))

(defcenum (compare-op)
  (:never #x0)
  (:less #x1)
  (:equal #x2)
  (:less-or-equal #x3)
  (:greater #x4)
  (:not-equal #x5)
  (:greater-or-equal #x6)
  (:always #x7))

(defcenum (component-swizzle)
  (:identity #x0)
  (:zero #x1)
  (:one #x2)
  (:r #x3)
  (:g #x4)
  (:b #x5)
  (:a #x6))

(defcenum (debug-report-error-ext)
  (:debug-report-error-none-ext #x0)
  (:debug-report-error-callback-ref-ext #x1))

(defcenum (debug-report-object-type-ext)
  (:debug-report-object-type-unknown-ext #x0)
  (:debug-report-object-type-instance-ext #x1)
  (:debug-report-object-type-physical-device-ext #x2)
  (:debug-report-object-type-device-ext #x3)
  (:debug-report-object-type-queue-ext #x4)
  (:debug-report-object-type-semaphore-ext #x5)
  (:debug-report-object-type-command-buffer-ext #x6)
  (:debug-report-object-type-fence-ext #x7)
  (:debug-report-object-type-device-memory-ext #x8)
  (:debug-report-object-type-buffer-ext #x9)
  (:debug-report-object-type-image-ext #xA)
  (:debug-report-object-type-event-ext #xB)
  (:debug-report-object-type-query-pool-ext #xC)
  (:debug-report-object-type-buffer-view-ext #xD)
  (:debug-report-object-type-image-view-ext #xE)
  (:debug-report-object-type-shader-module-ext #xF)
  (:debug-report-object-type-pipeline-cache-ext #x10)
  (:debug-report-object-type-pipeline-layout-ext #x11)
  (:debug-report-object-type-render-pass-ext #x12)
  (:debug-report-object-type-pipeline-ext #x13)
  (:debug-report-object-type-descriptor-set-layout-ext #x14)
  (:debug-report-object-type-sampler-ext #x15)
  (:debug-report-object-type-descriptor-pool-ext #x16)
  (:debug-report-object-type-descriptor-set-ext #x17)
  (:debug-report-object-type-framebuffer-ext #x18)
  (:debug-report-object-type-command-pool-ext #x19)
  (:debug-report-object-type-surface-khr-ext #x1A)
  (:debug-report-object-type-swapchain-khr-ext #x1B)
  (:debug-report-object-type-debug-report-ext #x1C))

(defcenum (descriptor-type)
  (:sampler #x0)
  (:combined-image-sampler #x1)
  (:sampled-image #x2)
  (:storage-image #x3)
  (:uniform-texel-buffer #x4)
  (:storage-texel-buffer #x5)
  (:uniform-buffer #x6)
  (:storage-buffer #x7)
  (:uniform-buffer-dynamic #x8)
  (:storage-buffer-dynamic #x9)
  (:input-attachment #xA))

(defcenum (dynamic-state)
  (:viewport #x0)
  (:scissor #x1)
  (:line-width #x2)
  (:depth-bias #x3)
  (:blend-constants #x4)
  (:depth-bounds #x5)
  (:stencil-compare-mask #x6)
  (:stencil-write-mask #x7)
  (:stencil-reference #x8))

(defcenum (filter)
  (:nearest #x0)
  (:linear #x1))

(defcenum (format)
  (:undefined #x0)
  (:r4g4-unorm-pack8 #x1)
  (:r4g4b4a4-unorm-pack16 #x2)
  (:b4g4r4a4-unorm-pack16 #x3)
  (:r5g6b5-unorm-pack16 #x4)
  (:b5g6r5-unorm-pack16 #x5)
  (:r5g5b5a1-unorm-pack16 #x6)
  (:b5g5r5a1-unorm-pack16 #x7)
  (:a1r5g5b5-unorm-pack16 #x8)
  (:r8-unorm #x9)
  (:r8-snorm #xA)
  (:r8-uscaled #xB)
  (:r8-sscaled #xC)
  (:r8-uint #xD)
  (:r8-sint #xE)
  (:r8-srgb #xF)
  (:r8g8-unorm #x10)
  (:r8g8-snorm #x11)
  (:r8g8-uscaled #x12)
  (:r8g8-sscaled #x13)
  (:r8g8-uint #x14)
  (:r8g8-sint #x15)
  (:r8g8-srgb #x16)
  (:r8g8b8-unorm #x17)
  (:r8g8b8-snorm #x18)
  (:r8g8b8-uscaled #x19)
  (:r8g8b8-sscaled #x1A)
  (:r8g8b8-uint #x1B)
  (:r8g8b8-sint #x1C)
  (:r8g8b8-srgb #x1D)
  (:b8g8r8-unorm #x1E)
  (:b8g8r8-snorm #x1F)
  (:b8g8r8-uscaled #x20)
  (:b8g8r8-sscaled #x21)
  (:b8g8r8-uint #x22)
  (:b8g8r8-sint #x23)
  (:b8g8r8-srgb #x24)
  (:r8g8b8a8-unorm #x25)
  (:r8g8b8a8-snorm #x26)
  (:r8g8b8a8-uscaled #x27)
  (:r8g8b8a8-sscaled #x28)
  (:r8g8b8a8-uint #x29)
  (:r8g8b8a8-sint #x2A)
  (:r8g8b8a8-srgb #x2B)
  (:b8g8r8a8-unorm #x2C)
  (:b8g8r8a8-snorm #x2D)
  (:b8g8r8a8-uscaled #x2E)
  (:b8g8r8a8-sscaled #x2F)
  (:b8g8r8a8-uint #x30)
  (:b8g8r8a8-sint #x31)
  (:b8g8r8a8-srgb #x32)
  (:a8b8g8r8-unorm-pack32 #x33)
  (:a8b8g8r8-snorm-pack32 #x34)
  (:a8b8g8r8-uscaled-pack32 #x35)
  (:a8b8g8r8-sscaled-pack32 #x36)
  (:a8b8g8r8-uint-pack32 #x37)
  (:a8b8g8r8-sint-pack32 #x38)
  (:a8b8g8r8-srgb-pack32 #x39)
  (:a2r10g10b10-unorm-pack32 #x3A)
  (:a2r10g10b10-snorm-pack32 #x3B)
  (:a2r10g10b10-uscaled-pack32 #x3C)
  (:a2r10g10b10-sscaled-pack32 #x3D)
  (:a2r10g10b10-uint-pack32 #x3E)
  (:a2r10g10b10-sint-pack32 #x3F)
  (:a2b10g10r10-unorm-pack32 #x40)
  (:a2b10g10r10-snorm-pack32 #x41)
  (:a2b10g10r10-uscaled-pack32 #x42)
  (:a2b10g10r10-sscaled-pack32 #x43)
  (:a2b10g10r10-uint-pack32 #x44)
  (:a2b10g10r10-sint-pack32 #x45)
  (:r16-unorm #x46)
  (:r16-snorm #x47)
  (:r16-uscaled #x48)
  (:r16-sscaled #x49)
  (:r16-uint #x4A)
  (:r16-sint #x4B)
  (:r16-sfloat #x4C)
  (:r16g16-unorm #x4D)
  (:r16g16-snorm #x4E)
  (:r16g16-uscaled #x4F)
  (:r16g16-sscaled #x50)
  (:r16g16-uint #x51)
  (:r16g16-sint #x52)
  (:r16g16-sfloat #x53)
  (:r16g16b16-unorm #x54)
  (:r16g16b16-snorm #x55)
  (:r16g16b16-uscaled #x56)
  (:r16g16b16-sscaled #x57)
  (:r16g16b16-uint #x58)
  (:r16g16b16-sint #x59)
  (:r16g16b16-sfloat #x5A)
  (:r16g16b16a16-unorm #x5B)
  (:r16g16b16a16-snorm #x5C)
  (:r16g16b16a16-uscaled #x5D)
  (:r16g16b16a16-sscaled #x5E)
  (:r16g16b16a16-uint #x5F)
  (:r16g16b16a16-sint #x60)
  (:r16g16b16a16-sfloat #x61)
  (:r32-uint #x62)
  (:r32-sint #x63)
  (:r32-sfloat #x64)
  (:r32g32-uint #x65)
  (:r32g32-sint #x66)
  (:r32g32-sfloat #x67)
  (:r32g32b32-uint #x68)
  (:r32g32b32-sint #x69)
  (:r32g32b32-sfloat #x6A)
  (:r32g32b32a32-uint #x6B)
  (:r32g32b32a32-sint #x6C)
  (:r32g32b32a32-sfloat #x6D)
  (:r64-uint #x6E)
  (:r64-sint #x6F)
  (:r64-sfloat #x70)
  (:r64g64-uint #x71)
  (:r64g64-sint #x72)
  (:r64g64-sfloat #x73)
  (:r64g64b64-uint #x74)
  (:r64g64b64-sint #x75)
  (:r64g64b64-sfloat #x76)
  (:r64g64b64a64-uint #x77)
  (:r64g64b64a64-sint #x78)
  (:r64g64b64a64-sfloat #x79)
  (:b10g11r11-ufloat-pack32 #x7A)
  (:e5b9g9r9-ufloat-pack32 #x7B)
  (:d16-unorm #x7C)
  (:x8-d24-unorm-pack32 #x7D)
  (:d32-sfloat #x7E)
  (:s8-uint #x7F)
  (:d16-unorm-s8-uint #x80)
  (:d24-unorm-s8-uint #x81)
  (:d32-sfloat-s8-uint #x82)
  (:bc1-rgb-unorm-block #x83)
  (:bc1-rgb-srgb-block #x84)
  (:bc1-rgba-unorm-block #x85)
  (:bc1-rgba-srgb-block #x86)
  (:bc2-unorm-block #x87)
  (:bc2-srgb-block #x88)
  (:bc3-unorm-block #x89)
  (:bc3-srgb-block #x8A)
  (:bc4-unorm-block #x8B)
  (:bc4-snorm-block #x8C)
  (:bc5-unorm-block #x8D)
  (:bc5-snorm-block #x8E)
  (:bc6h-ufloat-block #x8F)
  (:bc6h-sfloat-block #x90)
  (:bc7-unorm-block #x91)
  (:bc7-srgb-block #x92)
  (:etc2-r8g8b8-unorm-block #x93)
  (:etc2-r8g8b8-srgb-block #x94)
  (:etc2-r8g8b8a1-unorm-block #x95)
  (:etc2-r8g8b8a1-srgb-block #x96)
  (:etc2-r8g8b8a8-unorm-block #x97)
  (:etc2-r8g8b8a8-srgb-block #x98)
  (:eac-r11-unorm-block #x99)
  (:eac-r11-snorm-block #x9A)
  (:eac-r11g11-unorm-block #x9B)
  (:eac-r11g11-snorm-block #x9C)
  (:astc-4x4-unorm-block #x9D)
  (:astc-4x4-srgb-block #x9E)
  (:astc-5x4-unorm-block #x9F)
  (:astc-5x4-srgb-block #xA0)
  (:astc-5x5-unorm-block #xA1)
  (:astc-5x5-srgb-block #xA2)
  (:astc-6x5-unorm-block #xA3)
  (:astc-6x5-srgb-block #xA4)
  (:astc-6x6-unorm-block #xA5)
  (:astc-6x6-srgb-block #xA6)
  (:astc-8x5-unorm-block #xA7)
  (:astc-8x5-srgb-block #xA8)
  (:astc-8x6-unorm-block #xA9)
  (:astc-8x6-srgb-block #xAA)
  (:astc-8x8-unorm-block #xAB)
  (:astc-8x8-srgb-block #xAC)
  (:astc-10x5-unorm-block #xAD)
  (:astc-10x5-srgb-block #xAE)
  (:astc-10x6-unorm-block #xAF)
  (:astc-10x6-srgb-block #xB0)
  (:astc-10x8-unorm-block #xB1)
  (:astc-10x8-srgb-block #xB2)
  (:astc-10x10-unorm-block #xB3)
  (:astc-10x10-srgb-block #xB4)
  (:astc-12x10-unorm-block #xB5)
  (:astc-12x10-srgb-block #xB6)
  (:astc-12x12-unorm-block #xB7)
  (:astc-12x12-srgb-block #xB8))

(defcenum (front-face)
  (:counter-clockwise #x0)
  (:clockwise #x1))

(defcenum (image-layout)
  (:undefined #x0) ;; Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)
  (:general #x1) ;; General layout when image can be used for any kind of access
  (:color-attachment-optimal #x2) ;; Optimal layout when image is only used for color attachment read/write
  (:depth-stencil-attachment-optimal #x3) ;; Optimal layout when image is only used for depth/stencil attachment read/write
  (:depth-stencil-read-only-optimal #x4) ;; Optimal layout when image is used for read only depth/stencil attachment and shader access
  (:shader-read-only-optimal #x5) ;; Optimal layout when image is used for read only shader access
  (:transfer-src-optimal #x6) ;; Optimal layout when image is used only as source of transfer operations
  (:transfer-dst-optimal #x7) ;; Optimal layout when image is used only as destination of transfer operations
  (:preinitialized #x8) ;; Initial layout used when the data is populated by the CPU
  (:present-src-khr #x3B9ACDEA)) ;; VK_KHR_swapchain

(defcenum (image-tiling)
  (:optimal #x0)
  (:linear #x1))

(defcenum (image-type)
  (:1d #x0)
  (:2d #x1)
  (:3d #x2))

(defcenum (image-view-type)
  (:1d #x0)
  (:2d #x1)
  (:3d #x2)
  (:cube #x3)
  (:1d-array #x4)
  (:2d-array #x5)
  (:cube-array #x6))

(defcenum (index-type)
  (:uint16 #x0)
  (:uint32 #x1))

(defcenum (internal-allocation-type)
  (:executable #x0))

(defcenum (logic-op)
  (:clear #x0)
  (:and #x1)
  (:and-reverse #x2)
  (:copy #x3)
  (:and-inverted #x4)
  (:no-op #x5)
  (:xor #x6)
  (:or #x7)
  (:nor #x8)
  (:equivalent #x9)
  (:invert #xA)
  (:or-reverse #xB)
  (:copy-inverted #xC)
  (:or-inverted #xD)
  (:nand #xE)
  (:set #xF))

(defcenum (physical-device-type)
  (:other #x0)
  (:integrated-gpu #x1)
  (:discrete-gpu #x2)
  (:virtual-gpu #x3)
  (:cpu #x4))

(defcenum (pipeline-bind-point)
  (:graphics #x0)
  (:compute #x1))

(defcenum (pipeline-cache-header-version)
  (:one #x1))

(defcenum (polygon-mode)
  (:fill #x0)
  (:line #x1)
  (:point #x2))

(defcenum (present-mode-khr)
  (:immediate-khr #x0)
  (:mailbox-khr #x1)
  (:fifo-khr #x2)
  (:fifo-relaxed-khr #x3))

(defcenum (primitive-topology)
  (:point-list #x0)
  (:line-list #x1)
  (:line-strip #x2)
  (:triangle-list #x3)
  (:triangle-strip #x4)
  (:triangle-fan #x5)
  (:line-list-with-adjacency #x6)
  (:line-strip-with-adjacency #x7)
  (:triangle-list-with-adjacency #x8)
  (:triangle-strip-with-adjacency #x9)
  (:patch-list #xA))

(defcenum (query-type)
  (:occlusion #x0)
  (:pipeline-statistics #x1) ;; Optional
  (:timestamp #x2))

(defcenum (result :int)
  (:success #x0) ;; Command completed successfully
  (:not-ready #x1) ;; A fence or query has not yet completed
  (:timeout #x2) ;; A wait operation has not completed in the specified time
  (:event-set #x3) ;; An event is signaled
  (:event-reset #x4) ;; An event is unsignalled
  (:incomplete #x5) ;; A return array was too small for the resul
  (:error-out-of-host-memory -1) ;; A host memory allocation has failed
  (:error-out-of-device-memory -2) ;; A device memory allocation has failed
  (:error-initialization-failed -3) ;; The logical device has been lost. See <<devsandqueues-lost-device>>
  (:error-device-lost -4) ;; Initialization of a object has failed
  (:error-memory-map-failed -5) ;; Mapping of a memory object has failed
  (:error-layer-not-present -6) ;; Layer specified does not exist
  (:error-extension-not-present -7) ;; Extension specified does not exist
  (:error-feature-not-present -8) ;; Requested feature is not available on this device
  (:error-incompatible-driver -9) ;; Unable to find a Vulkan driver
  (:error-too-many-objects -10) ;; Too many objects of the type have already been created
  (:error-format-not-supported -11) ;; Requested format is not supported on this device
  (:error-surface-lost-khr -1000000000) ;; VK_KHR_surface
  (:error-native-window-in-use-khr -1000000001) ;; VK_KHR_surface
  (:suboptimal-khr #x3B9ACDEB) ;; VK_KHR_swapchain
  (:error-out-of-date-khr -1000001004) ;; VK_KHR_swapchain
  (:error-incompatible-display-khr -1000003001) ;; VK_KHR_display_swapchain
  (:error-validation-failed-ext -1000011001) ;; VK_EXT_debug_report
  (:nv-extension-0-error -1000012000) ;; VK_NV_extension_0
  (:nv-extension-1-error -1000013000)) ;; VK_NV_extension_1

(defparameter *result-comments*
  (alexandria:plist-hash-table
    '(:success "Command completed successfully"
     :not-ready "A fence or query has not yet completed"
     :timeout "A wait operation has not completed in the specified time"
     :event-set "An event is signaled"
     :event-reset "An event is unsignalled"
     :incomplete "A return array was too small for the resul"
     :error-out-of-host-memory "A host memory allocation has failed"
     :error-out-of-device-memory "A device memory allocation has failed"
     :error-initialization-failed "The logical device has been lost. See <<devsandqueues-lost-device>>"
     :error-device-lost "Initialization of a object has failed"
     :error-memory-map-failed "Mapping of a memory object has failed"
     :error-layer-not-present "Layer specified does not exist"
     :error-extension-not-present "Extension specified does not exist"
     :error-feature-not-present "Requested feature is not available on this device"
     :error-incompatible-driver "Unable to find a Vulkan driver"
     :error-too-many-objects "Too many objects of the type have already been created"
     :error-format-not-supported "Requested format is not supported on this device"
     :error-surface-lost-khr NIL
     :error-native-window-in-use-khr NIL
     :suboptimal-khr NIL
     :error-out-of-date-khr NIL
     :error-incompatible-display-khr NIL
     :error-validation-failed-ext NIL
     :nv-extension-0-error NIL
     :nv-extension-1-error NIL)))

(defcenum (sampler-address-mode)
  (:repeat #x0)
  (:mirrored-repeat #x1)
  (:clamp-to-edge #x2)
  (:clamp-to-border #x3)
  (:mirror-clamp-to-edge #x4))

(defcenum (sampler-mipmap-mode)
  (:nearest #x0) ;; Choose nearest mip level
  (:linear #x1)) ;; Linear filter between mip levels

(defcenum (sharing-mode)
  (:exclusive #x0)
  (:concurrent #x1))

(defcenum (stencil-op)
  (:keep #x0)
  (:zero #x1)
  (:replace #x2)
  (:increment-and-clamp #x3)
  (:decrement-and-clamp #x4)
  (:invert #x5)
  (:increment-and-wrap #x6)
  (:decrement-and-wrap #x7))

(defcenum (structure-type)
  (:application-info #x0)
  (:instance-create-info #x1)
  (:device-queue-create-info #x2)
  (:device-create-info #x3)
  (:submit-info #x4)
  (:memory-allocate-info #x5)
  (:mapped-memory-range #x6)
  (:bind-sparse-info #x7)
  (:fence-create-info #x8)
  (:semaphore-create-info #x9)
  (:event-create-info #xA)
  (:query-pool-create-info #xB)
  (:buffer-create-info #xC)
  (:buffer-view-create-info #xD)
  (:image-create-info #xE)
  (:image-view-create-info #xF)
  (:shader-module-create-info #x10)
  (:pipeline-cache-create-info #x11)
  (:pipeline-shader-stage-create-info #x12)
  (:pipeline-vertex-input-state-create-info #x13)
  (:pipeline-input-assembly-state-create-info #x14)
  (:pipeline-tessellation-state-create-info #x15)
  (:pipeline-viewport-state-create-info #x16)
  (:pipeline-rasterization-state-create-info #x17)
  (:pipeline-multisample-state-create-info #x18)
  (:pipeline-depth-stencil-state-create-info #x19)
  (:pipeline-color-blend-state-create-info #x1A)
  (:pipeline-dynamic-state-create-info #x1B)
  (:graphics-pipeline-create-info #x1C)
  (:compute-pipeline-create-info #x1D)
  (:pipeline-layout-create-info #x1E)
  (:sampler-create-info #x1F)
  (:descriptor-set-layout-create-info #x20)
  (:descriptor-pool-create-info #x21)
  (:descriptor-set-allocate-info #x22)
  (:write-descriptor-set #x23)
  (:copy-descriptor-set #x24)
  (:framebuffer-create-info #x25)
  (:render-pass-create-info #x26)
  (:command-pool-create-info #x27)
  (:command-buffer-allocate-info #x28)
  (:command-buffer-inheritance-info #x29)
  (:command-buffer-begin-info #x2A)
  (:render-pass-begin-info #x2B)
  (:buffer-memory-barrier #x2C)
  (:image-memory-barrier #x2D)
  (:memory-barrier #x2E)
  (:loader-instance-create-info #x2F)
  (:loader-device-create-info #x30)
  (:swapchain-create-info-khr #x3B9ACDE8) ;; VK_KHR_swapchain
  (:present-info-khr #x3B9ACDE9) ;; VK_KHR_swapchain
  (:display-mode-create-info-khr #x3B9AD1D0) ;; VK_KHR_display
  (:display-surface-create-info-khr #x3B9AD1D1) ;; VK_KHR_display
  (:display-present-info-khr #x3B9AD5B8) ;; VK_KHR_display_swapchain
  (:xlib-surface-create-info-khr #x3B9AD9A0) ;; VK_KHR_xlib_surface
  (:xcb-surface-create-info-khr #x3B9ADD88) ;; VK_KHR_xcb_surface
  (:wayland-surface-create-info-khr #x3B9AE170) ;; VK_KHR_wayland_surface
  (:mir-surface-create-info-khr #x3B9AE558) ;; VK_KHR_mir_surface
  (:android-surface-create-info-khr #x3B9AE940) ;; VK_KHR_android_surface
  (:win32-surface-create-info-khr #x3B9AED28) ;; VK_KHR_win32_surface
  (:debug-report-create-info-ext #x3B9AF4F8)) ;; VK_EXT_debug_report

(defcenum (subpass-contents)
  (:inline #x0)
  (:secondary-command-buffers #x1))

(defcenum (system-allocation-scope)
  (:command #x0)
  (:object #x1)
  (:cache #x2)
  (:device #x3)
  (:instance #x4))

(defcenum (vertex-input-rate)
  (:vertex #x0)
  (:instance #x1))

 ;; (defcallback x (pointer void)
 ;;  ((puserdata (pointer void)) (size size_t) (alignment size_t)
 ;;   (allocationscope system-allocation-scope)))
(defctype pfn-allocation-function :pointer)

 ;; (defcallback x bool32
 ;;  ((flags debug-report-flags-ext) (objecttype debug-report-object-type-ext)
 ;;   (object uint-6-4_t) (location size_t) (messagecode int-3-2_t)
 ;;   (playerprefix (pointer char)) (pmessage/const (pointer char))
 ;;   (puserdata/const (pointer void))))
(defctype pfn-debug-report-callback-ext :pointer)

 ;; (defcallback x void ((puserdata (pointer void)) (pmemory (pointer void))))
(defctype pfn-free-function :pointer)

 ;; (defcallback x void
 ;;  ((puserdata (pointer void)) (size size_t)
 ;;   (allocationtype internal-allocation-type)
 ;;   (allocationscope system-allocation-scope)))
(defctype pfn-internal-allocation-notification :pointer)

 ;; (defcallback x void
 ;;  ((puserdata (pointer void)) (size size_t)
 ;;   (allocationtype internal-allocation-type)
 ;;   (allocationscope system-allocation-scope)))
(defctype pfn-internal-free-notification :pointer)

 ;; (defcallback x (pointer void)
 ;;  ((puserdata (pointer void)) (poriginal (pointer void)) (size size_t)
 ;;   (alignment size_t) (allocationscope system-allocation-scope)))
(defctype pfn-reallocation-function :pointer)

 ;; (defcallback x void nil)
(defctype pfn-void-function :pointer)

(defcstruct allocation-callbacks
  (:p-user-data (:pointer :void))#|optional (true) opaque t|#
  (:pfn-allocation pfn-allocation-function)
  (:pfn-reallocation pfn-reallocation-function)
  (:pfn-free pfn-free-function)
  (:pfn-internal-allocation pfn-internal-allocation-notification)#|optional (true)|#
  (:pfn-internal-free pfn-internal-free-notification)#|optional (true)|#)

(defcstruct android-surface-create-info-khr
  (:s-type structure-type)#|must-be android-surface-create-info-khr|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags android-surface-create-flags-khr)#|optional (true)|#
  (:window (:pointer a-native-window))#|opaque t|#)

(defcstruct application-info
  (:s-type structure-type)#|must-be application-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:p-application-name (:pointer :char))#|optional (true) len (null-terminated)|#
  (:application-version :uint32)
  (:p-engine-name (:pointer :char))#|optional (true) len (null-terminated)|#
  (:engine-version :uint32)
  (:api-version :uint32))

(defcstruct attachment-description
  (:flags attachment-description-flags)#|optional (true)|#
  (:format format)
  (:samples sample-count-flag-bits)
  (:load-op attachment-load-op)
  (:store-op attachment-store-op)
  (:stencil-load-op attachment-load-op)
  (:stencil-store-op attachment-store-op)
  (:initial-layout image-layout)
  (:final-layout image-layout))

(defcstruct attachment-reference
  (:attachment :uint32)
  (:layout image-layout))

(defcstruct sparse-memory-bind
  (:resource-offset device-size)
  (:size device-size)
  (:memory device-memory)#|optional (true)|#
  (:memory-offset device-size)
  (:flags sparse-memory-bind-flags)#|optional (true)|#)

(defcstruct sparse-buffer-memory-bind-info
  (:buffer buffer)
  (:bind-count :uint32)
  (:p-binds (:pointer (:struct sparse-memory-bind)))#|len (bind-count)|#)

(defcstruct sparse-image-opaque-memory-bind-info
  (:image image)
  (:bind-count :uint32)
  (:p-binds (:pointer (:struct sparse-memory-bind)))#|len (bind-count)|#)

(defcstruct image-subresource
  (:aspect-mask image-aspect-flags)
  (:mip-level :uint32)
  (:array-layer :uint32))

(defcstruct offset-3d
  (:x :int32)
  (:y :int32)
  (:z :int32))

(defcstruct extent-3d
  (:width :uint32)
  (:height :uint32)
  (:depth :uint32))

(defcstruct sparse-image-memory-bind
  (:subresource (:struct image-subresource))
  (:offset (:struct offset-3d))
  (:extent (:struct extent-3d))
  (:memory device-memory)#|optional (true)|#
  (:memory-offset device-size)
  (:flags sparse-memory-bind-flags)#|optional (true)|#)

(defcstruct sparse-image-memory-bind-info
  (:image image)
  (:bind-count :uint32)
  (:p-binds (:pointer (:struct sparse-image-memory-bind)))#|len (bind-count)|#)

(defcstruct bind-sparse-info
  (:s-type structure-type)#|must-be bind-sparse-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:wait-semaphore-count :uint32)#|optional (true)|#
  (:p-wait-semaphores (:pointer semaphore))#|len (wait-semaphore-count)|#
  (:buffer-bind-count :uint32)#|optional (true)|#
  (:p-buffer-binds (:pointer (:struct sparse-buffer-memory-bind-info)))#|len (buffer-bind-count)|#
  (:image-opaque-bind-count :uint32)#|optional (true)|#
  (:p-image-opaque-binds (:pointer
                          (:struct sparse-image-opaque-memory-bind-info)))#|len (image-opaque-bind-count)|#
  (:image-bind-count :uint32)#|optional (true)|#
  (:p-image-binds (:pointer (:struct sparse-image-memory-bind-info)))#|len (image-bind-count)|#
  (:signal-semaphore-count :uint32)#|optional (true)|#
  (:p-signal-semaphores (:pointer semaphore))#|len (signal-semaphore-count)|#)

(defcstruct buffer-copy
  (:src-offset device-size)
  (:dst-offset device-size)
  (:size device-size))

(defcstruct buffer-create-info
  (:s-type structure-type)#|must-be buffer-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags buffer-create-flags)#|optional (true)|#
  (:size device-size)
  (:usage buffer-usage-flags)
  (:sharing-mode sharing-mode)
  (:queue-family-index-count :uint32)#|optional (true)|#
  (:p-queue-family-indices (:pointer :uint32))#|len (queue-family-index-count)|#)

(defcstruct image-subresource-layers
  (:aspect-mask image-aspect-flags)
  (:mip-level :uint32)
  (:base-array-layer :uint32)
  (:layer-count :uint32))

(defcstruct buffer-image-copy
  (:buffer-offset device-size)
  (:buffer-row-length :uint32)
  (:buffer-image-height :uint32)
  (:image-subresource (:struct image-subresource-layers))
  (:image-offset (:struct offset-3d))
  (:image-extent (:struct extent-3d)))

(defcstruct buffer-memory-barrier
  (:s-type structure-type)#|must-be buffer-memory-barrier|#
  (:p-next (:pointer :void))#|opaque t|#
  (:src-access-mask access-flags)#|optional (true)|#
  (:dst-access-mask access-flags)#|optional (true)|#
  (:src-queue-family-index :uint32)
  (:dst-queue-family-index :uint32)
  (:buffer buffer)
  (:offset device-size)
  (:size device-size))

(defcstruct buffer-view-create-info
  (:s-type structure-type)#|must-be buffer-view-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags buffer-view-create-flags)#|optional (true)|#
  (:buffer buffer)
  (:format format)
  (:offset device-size)
  (:range device-size))

(defcunion clear-color-value
  (:float-32 :float :count 4)
  (:int-32 :int32 :count 4)
  (:uint-32 :uint32 :count 4))

(defcstruct clear-depth-stencil-value
  (:depth :float)
  (:stencil :uint32))

(defcunion clear-value
  (:color (:union clear-color-value))
  (:depth-stencil (:struct clear-depth-stencil-value)))

(defcstruct clear-attachment
  (:aspect-mask image-aspect-flags)
  (:color-attachment :uint32)
  (:clear-value (:union clear-value)))

(defcunion clear-color-value
  (:float-32 :float :count 4)
  (:int-32 :int32 :count 4)
  (:uint-32 :uint32 :count 4))

(defcstruct clear-depth-stencil-value
  (:depth :float)
  (:stencil :uint32))

(defcstruct offset-2d
  (:x :int32)
  (:y :int32))

(defcstruct extent-2d
  (:width :uint32)
  (:height :uint32))

(defcstruct rect-2d
  (:offset (:struct offset-2d))
  (:extent (:struct extent-2d)))

(defcstruct clear-rect
  (:rect (:struct rect-2d))
  (:base-array-layer :uint32)
  (:layer-count :uint32))

(defcunion clear-value
  (:color (:union clear-color-value))
  (:depth-stencil (:struct clear-depth-stencil-value)))

(defcstruct command-buffer-allocate-info
  (:s-type structure-type)#|must-be command-buffer-allocate-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:command-pool command-pool)
  (:level command-buffer-level)
  (:command-buffer-count :uint32))

(defcstruct command-buffer-inheritance-info
  (:s-type structure-type)#|must-be command-buffer-inheritance-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:render-pass render-pass)#|optional (true)|#
  (:subpass :uint32)
  (:framebuffer framebuffer)#|optional (true)|#
  (:occlusion-query-enable bool32)
  (:query-flags query-control-flags)#|optional (true)|#
  (:pipeline-statistics query-pipeline-statistic-flags)#|optional (true)|#)

(defcstruct command-buffer-begin-info
  (:s-type structure-type)#|must-be command-buffer-begin-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags command-buffer-usage-flags)#|optional (true)|#
  (:p-inheritance-info (:pointer (:struct command-buffer-inheritance-info)))#|optional (true)|#)

(defcstruct command-buffer-inheritance-info
  (:s-type structure-type)#|must-be command-buffer-inheritance-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:render-pass render-pass)#|optional (true)|#
  (:subpass :uint32)
  (:framebuffer framebuffer)#|optional (true)|#
  (:occlusion-query-enable bool32)
  (:query-flags query-control-flags)#|optional (true)|#
  (:pipeline-statistics query-pipeline-statistic-flags)#|optional (true)|#)

(defcstruct command-pool-create-info
  (:s-type structure-type)#|must-be command-pool-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags command-pool-create-flags)#|optional (true)|#
  (:queue-family-index :uint32))

(defcstruct component-mapping
  (:r component-swizzle)
  (:g component-swizzle)
  (:b component-swizzle)
  (:a component-swizzle))

(defcstruct specialization-map-entry
  (:constant-id :uint32)
  (:offset :uint32)
  (:size size-t))

(defcstruct specialization-info
  (:map-entry-count :uint32)#|optional (true)|#
  (:p-map-entries (:pointer (:struct specialization-map-entry)))#|len (map-entry-count)|#
  (:data-size size-t)#|optional (true)|#
  (:p-data (:pointer :void))#|len (data-size) opaque t|#)

(defcstruct pipeline-shader-stage-create-info
  (:s-type structure-type)#|must-be pipeline-shader-stage-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-shader-stage-create-flags)#|optional (true)|#
  (:stage shader-stage-flag-bits)
  (:module shader-module)
  (:p-name (:pointer :char))#|len (null-terminated)|#
  (:p-specialization-info (:pointer (:struct specialization-info)))#|optional (true)|#)

(defcstruct compute-pipeline-create-info
  (:s-type structure-type)#|must-be compute-pipeline-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-create-flags)#|optional (true)|#
  (:stage (:struct pipeline-shader-stage-create-info))
  (:layout pipeline-layout)
  (:base-pipeline-handle pipeline)#|optional (true)|#
  (:base-pipeline-index :int32))

(defcstruct copy-descriptor-set
  (:s-type structure-type)#|must-be copy-descriptor-set|#
  (:p-next (:pointer :void))#|opaque t|#
  (:src-set descriptor-set)
  (:src-binding :uint32)
  (:src-array-element :uint32)
  (:dst-set descriptor-set)
  (:dst-binding :uint32)
  (:dst-array-element :uint32)
  (:descriptor-count :uint32))

(defcstruct debug-report-callback-create-info-ext
  (:s-type structure-type)#|must-be debug-report-callback-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags debug-report-flags-ext)
  (:pfn-callback pfn-debug-report-callback-ext)
  (:p-user-data (:pointer :void))#|optional (true) opaque t|#)

(defcstruct descriptor-buffer-info
  (:buffer buffer)
  (:offset device-size)
  (:range device-size))

(defcstruct descriptor-image-info
  (:sampler sampler)
  (:image-view image-view)
  (:image-layout image-layout))

(defcstruct descriptor-pool-size
  (:type descriptor-type)
  (:descriptor-count :uint32))

(defcstruct descriptor-pool-create-info
  (:s-type structure-type)#|must-be descriptor-pool-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags descriptor-pool-create-flags)#|optional (true)|#
  (:max-sets :uint32)
  (:pool-size-count :uint32)
  (:p-pool-sizes (:pointer (:struct descriptor-pool-size)))#|len (pool-size-count)|#)

(defcstruct descriptor-pool-size
  (:type descriptor-type)
  (:descriptor-count :uint32))

(defcstruct descriptor-set-allocate-info
  (:s-type structure-type)#|must-be descriptor-set-allocate-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:descriptor-pool descriptor-pool)
  (:descriptor-set-count :uint32)
  (:p-set-layouts (:pointer descriptor-set-layout))#|len (descriptor-set-count)|#)

(defcstruct descriptor-set-layout-binding
  (:binding :uint32)
  (:descriptor-type descriptor-type)
  (:descriptor-count :uint32)#|optional (true)|#
  (:stage-flags shader-stage-flags)
  (:p-immutable-samplers (:pointer sampler))#|optional (true) len (descriptor-count)|#)

(defcstruct descriptor-set-layout-binding
  (:binding :uint32)
  (:descriptor-type descriptor-type)
  (:descriptor-count :uint32)#|optional (true)|#
  (:stage-flags shader-stage-flags)
  (:p-immutable-samplers (:pointer sampler))#|optional (true) len (descriptor-count)|#)

(defcstruct descriptor-set-layout-create-info
  (:s-type structure-type)#|must-be descriptor-set-layout-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags descriptor-set-layout-create-flags)#|optional (true)|#
  (:binding-count :uint32)#|optional (true)|#
  (:p-bindings (:pointer (:struct descriptor-set-layout-binding)))#|len (binding-count)|#)

(defcstruct device-queue-create-info
  (:s-type structure-type)#|must-be device-queue-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags device-queue-create-flags)#|optional (true)|#
  (:queue-family-index :uint32)
  (:queue-count :uint32)
  (:p-queue-priorities (:pointer :float))#|len (queue-count)|#)

(defcstruct physical-device-features
  (:robust-buffer-access bool32)
  (:full-draw-index-uint-32 bool32)
  (:image-cube-array bool32)
  (:independent-blend bool32)
  (:geometry-shader bool32)
  (:tessellation-shader bool32)
  (:sample-rate-shading bool32)
  (:dual-src-blend bool32)
  (:logic-op bool32)
  (:multi-draw-indirect bool32)
  (:draw-indirect-first-instance bool32)
  (:depth-clamp bool32)
  (:depth-bias-clamp bool32)
  (:fill-mode-non-solid bool32)
  (:depth-bounds bool32)
  (:wide-lines bool32)
  (:large-points bool32)
  (:alpha-to-one bool32)
  (:multi-viewport bool32)
  (:sampler-anisotropy bool32)
  (:texture-compression-etc2 bool32)
  (:texture-compression-astc_-ldr bool32)
  (:texture-compression-bc bool32)
  (:occlusion-query-precise bool32)
  (:pipeline-statistics-query bool32)
  (:vertex-pipeline-stores-and-atomics bool32)
  (:fragment-stores-and-atomics bool32)
  (:shader-tessellation-and-geometry-point-size bool32)
  (:shader-image-gather-extended bool32)
  (:shader-storage-image-extended-formats bool32)
  (:shader-storage-image-multisample bool32)
  (:shader-storage-image-read-without-format bool32)
  (:shader-storage-image-write-without-format bool32)
  (:shader-uniform-buffer-array-dynamic-indexing bool32)
  (:shader-sampled-image-array-dynamic-indexing bool32)
  (:shader-storage-buffer-array-dynamic-indexing bool32)
  (:shader-storage-image-array-dynamic-indexing bool32)
  (:shader-clip-distance bool32)
  (:shader-cull-distance bool32)
  (:shader-float-64 bool32)
  (:shader-int-64 bool32)
  (:shader-int-16 bool32)
  (:shader-resource-residency bool32)
  (:shader-resource-min-lod bool32)
  (:sparse-binding bool32)
  (:sparse-residency-buffer bool32)
  (:sparse-residency-image-2d bool32)
  (:sparse-residency-image-3d bool32)
  (:sparse-residency-2-samples bool32)
  (:sparse-residency-4-samples bool32)
  (:sparse-residency-8-samples bool32)
  (:sparse-residency-16-samples bool32)
  (:sparse-residency-aliased bool32)
  (:variable-multisample-rate bool32)
  (:inherited-queries bool32))

(defcstruct device-create-info
  (:s-type structure-type)#|must-be device-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags device-create-flags)#|optional (true)|#
  (:queue-create-info-count :uint32)
  (:p-queue-create-infos (:pointer (:struct device-queue-create-info)))#|len (queue-create-info-count)|#
  (:enabled-layer-count :uint32)#|optional (true)|#
  (:pp-enabled-layer-names (:pointer (:pointer :char)))#|optional (true) len (enabled-layer-count
                                                                              null-terminated)|#
  (:enabled-extension-count :uint32)#|optional (true)|#
  (:pp-enabled-extension-names (:pointer (:pointer :char)))#|optional (true) len (enabled-extension-count
                                                                                  null-terminated)|#
  (:p-enabled-features (:pointer (:struct physical-device-features))))

(defcstruct device-queue-create-info
  (:s-type structure-type)#|must-be device-queue-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags device-queue-create-flags)#|optional (true)|#
  (:queue-family-index :uint32)
  (:queue-count :uint32)
  (:p-queue-priorities (:pointer :float))#|len (queue-count)|#)

(defcstruct dispatch-indirect-command
  (:x :uint32)
  (:y :uint32)
  (:z :uint32))

(defcstruct display-mode-parameters-khr
  (:visible-region (:struct extent-2d))
  (:refresh-rate :uint32))

(defcstruct display-mode-create-info-khr
  (:s-type structure-type)#|must-be display-mode-create-info-khr|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags display-mode-create-flags-khr)#|optional (true)|#
  (:parameters (:struct display-mode-parameters-khr)))

(defcstruct display-mode-parameters-khr
  (:visible-region (:struct extent-2d))
  (:refresh-rate :uint32))

(defcstruct display-mode-properties-khr
  (:display-mode display-mode-khr)
  (:parameters (:struct display-mode-parameters-khr)))

(defcstruct display-plane-capabilities-khr
  (:supported-alpha display-plane-alpha-flags-khr)#|optional (true)|#
  (:min-src-position (:struct offset-2d))
  (:max-src-position (:struct offset-2d))
  (:min-src-extent (:struct extent-2d))
  (:max-src-extent (:struct extent-2d))
  (:min-dst-position (:struct offset-2d))
  (:max-dst-position (:struct offset-2d))
  (:min-dst-extent (:struct extent-2d))
  (:max-dst-extent (:struct extent-2d)))

(defcstruct display-plane-properties-khr
  (:current-display display-khr)
  (:current-stack-index :uint32))

(defcstruct display-present-info-khr
  (:s-type structure-type)#|must-be display-present-info-khr|#
  (:p-next (:pointer :void))#|opaque t|#
  (:src-rect (:struct rect-2d))
  (:dst-rect (:struct rect-2d))
  (:persistent bool32))

(defcstruct display-properties-khr
  (:display display-khr)
  (:display-name (:pointer :char))#|len (null-terminated)|#
  (:physical-dimensions (:struct extent-2d))
  (:physical-resolution (:struct extent-2d))
  (:supported-transforms surface-transform-flags-khr)#|optional (true)|#
  (:plane-reorder-possible bool32)
  (:persistent-content bool32))

(defcstruct display-surface-create-info-khr
  (:s-type structure-type)#|must-be display-surface-create-info-khr|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags display-surface-create-flags-khr)#|optional (true)|#
  (:display-mode display-mode-khr)
  (:plane-index :uint32)
  (:plane-stack-index :uint32)
  (:transform surface-transform-flag-bits-khr)
  (:global-alpha :float)
  (:alpha-mode display-plane-alpha-flag-bits-khr)
  (:image-extent (:struct extent-2d)))

(defcstruct draw-indexed-indirect-command
  (:index-count :uint32)
  (:instance-count :uint32)
  (:first-index :uint32)
  (:vertex-offset :int32)
  (:first-instance :uint32))

(defcstruct draw-indirect-command
  (:vertex-count :uint32)
  (:instance-count :uint32)
  (:first-vertex :uint32)
  (:first-instance :uint32))

(defcstruct event-create-info
  (:s-type structure-type)#|must-be event-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags event-create-flags)#|optional (true)|#)

(defcstruct extension-properties
  (:extension-name :char :count 256)
  (:spec-version :uint32))

(defcstruct extent-2d
  (:width :uint32)
  (:height :uint32))

(defcstruct extent-3d
  (:width :uint32)
  (:height :uint32)
  (:depth :uint32))

(defcstruct fence-create-info
  (:s-type structure-type)#|must-be fence-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags fence-create-flags)#|optional (true)|#)

(defcstruct format-properties
  (:linear-tiling-features format-feature-flags)#|optional (true)|#
  (:optimal-tiling-features format-feature-flags)#|optional (true)|#
  (:buffer-features format-feature-flags)#|optional (true)|#)

(defcstruct framebuffer-create-info
  (:s-type structure-type)#|must-be framebuffer-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags framebuffer-create-flags)#|optional (true)|#
  (:render-pass render-pass)
  (:attachment-count :uint32)#|optional (true)|#
  (:p-attachments (:pointer image-view))#|len (attachment-count)|#
  (:width :uint32)
  (:height :uint32)
  (:layers :uint32))

(defcstruct vertex-input-binding-description
  (:binding :uint32)
  (:stride :uint32)
  (:input-rate vertex-input-rate))

(defcstruct vertex-input-attribute-description
  (:location :uint32)
  (:binding :uint32)
  (:format format)
  (:offset :uint32))

(defcstruct pipeline-vertex-input-state-create-info
  (:s-type structure-type)#|must-be pipeline-vertex-input-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-vertex-input-state-create-flags)#|optional (true)|#
  (:vertex-binding-description-count :uint32)#|optional (true)|#
  (:p-vertex-binding-descriptions (:pointer
                                   (:struct vertex-input-binding-description)))#|len (vertex-binding-description-count)|#
  (:vertex-attribute-description-count :uint32)#|optional (true)|#
  (:p-vertex-attribute-descriptions (:pointer
                                     (:struct
                                      vertex-input-attribute-description)))#|len (vertex-attribute-description-count)|#)

(defcstruct pipeline-input-assembly-state-create-info
  (:s-type structure-type)#|must-be pipeline-input-assembly-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-input-assembly-state-create-flags)#|optional (true)|#
  (:topology primitive-topology)
  (:primitive-restart-enable bool32))

(defcstruct pipeline-tessellation-state-create-info
  (:s-type structure-type)#|must-be pipeline-tessellation-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-tessellation-state-create-flags)#|optional (true)|#
  (:patch-control-points :uint32))

(defcstruct viewport
  (:x :float)
  (:y :float)
  (:width :float)
  (:height :float)
  (:min-depth :float)
  (:max-depth :float))

(defcstruct pipeline-viewport-state-create-info
  (:s-type structure-type)#|must-be pipeline-viewport-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-viewport-state-create-flags)#|optional (true)|#
  (:viewport-count :uint32)
  (:p-viewports (:pointer (:struct viewport)))#|optional (true) len (viewport-count)|#
  (:scissor-count :uint32)
  (:p-scissors (:pointer (:struct rect-2d)))#|optional (true) len (scissor-count)|#)

(defcstruct pipeline-rasterization-state-create-info
  (:s-type structure-type)#|must-be pipeline-rasterization-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-rasterization-state-create-flags)#|optional (true)|#
  (:depth-clamp-enable bool32)
  (:rasterizer-discard-enable bool32)
  (:polygon-mode polygon-mode)
  (:cull-mode cull-mode-flags)#|optional (true)|#
  (:front-face front-face)
  (:depth-bias-enable bool32)
  (:depth-bias-constant-factor :float)
  (:depth-bias-clamp :float)
  (:depth-bias-slope-factor :float)
  (:line-width :float))

(defcstruct pipeline-multisample-state-create-info
  (:s-type structure-type)#|must-be pipeline-multisample-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-multisample-state-create-flags)#|optional (true)|#
  (:rasterization-samples sample-count-flag-bits)
  (:sample-shading-enable bool32)
  (:min-sample-shading :float)
  (:p-sample-mask (:pointer sample-mask))#|optional (true) len (latexmath:[$\lceil{\mathit{rasterizationsamples} \over 32}\rceil$])|#
  (:alpha-to-coverage-enable bool32)
  (:alpha-to-one-enable bool32))

(defcstruct stencil-op-state
  (:fail-op stencil-op)
  (:pass-op stencil-op)
  (:depth-fail-op stencil-op)
  (:compare-op compare-op)
  (:compare-mask :uint32)
  (:write-mask :uint32)
  (:reference :uint32))

(defcstruct pipeline-depth-stencil-state-create-info
  (:s-type structure-type)#|must-be pipeline-depth-stencil-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-depth-stencil-state-create-flags)#|optional (true)|#
  (:depth-test-enable bool32)
  (:depth-write-enable bool32)
  (:depth-compare-op compare-op)
  (:depth-bounds-test-enable bool32)
  (:stencil-test-enable bool32)
  (:front (:struct stencil-op-state))
  (:back (:struct stencil-op-state))
  (:min-depth-bounds :float)
  (:max-depth-bounds :float))

(defcstruct pipeline-color-blend-attachment-state
  (:blend-enable bool32)
  (:src-color-blend-factor blend-factor)
  (:dst-color-blend-factor blend-factor)
  (:color-blend-op blend-op)
  (:src-alpha-blend-factor blend-factor)
  (:dst-alpha-blend-factor blend-factor)
  (:alpha-blend-op blend-op)
  (:color-write-mask color-component-flags)#|optional (true)|#)

(defcstruct pipeline-color-blend-state-create-info
  (:s-type structure-type)#|must-be pipeline-color-blend-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-color-blend-state-create-flags)#|optional (true)|#
  (:logic-op-enable bool32)
  (:logic-op logic-op)
  (:attachment-count :uint32)#|optional (true)|#
  (:p-attachments (:pointer (:struct pipeline-color-blend-attachment-state)))#|len (attachment-count)|#
  (:blend-constants :float :count 4))

(defcstruct pipeline-dynamic-state-create-info
  (:s-type structure-type)#|must-be pipeline-dynamic-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-dynamic-state-create-flags)#|optional (true)|#
  (:dynamic-state-count :uint32)
  (:p-dynamic-states (:pointer dynamic-state))#|len (dynamic-state-count)|#)

(defcstruct graphics-pipeline-create-info
  (:s-type structure-type)#|must-be graphics-pipeline-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-create-flags)#|optional (true)|#
  (:stage-count :uint32)
  (:p-stages (:pointer (:struct pipeline-shader-stage-create-info)))#|len (stage-count)|#
  (:p-vertex-input-state (:pointer
                          (:struct pipeline-vertex-input-state-create-info)))
  (:p-input-assembly-state (:pointer
                            (:struct pipeline-input-assembly-state-create-info)))
  (:p-tessellation-state (:pointer
                          (:struct pipeline-tessellation-state-create-info)))#|optional (true)|#
  (:p-viewport-state (:pointer (:struct pipeline-viewport-state-create-info)))#|optional (true)|#
  (:p-rasterization-state (:pointer
                           (:struct pipeline-rasterization-state-create-info)))
  (:p-multisample-state (:pointer
                         (:struct pipeline-multisample-state-create-info)))#|optional (true)|#
  (:p-depth-stencil-state (:pointer
                           (:struct pipeline-depth-stencil-state-create-info)))#|optional (true)|#
  (:p-color-blend-state (:pointer
                         (:struct pipeline-color-blend-state-create-info)))#|optional (true)|#
  (:p-dynamic-state (:pointer (:struct pipeline-dynamic-state-create-info)))#|optional (true)|#
  (:layout pipeline-layout)
  (:render-pass render-pass)
  (:subpass :uint32)
  (:base-pipeline-handle pipeline)#|optional (true)|#
  (:base-pipeline-index :int32))

(defcstruct image-blit
  (:src-subresource (:struct image-subresource-layers))
  (:src-offsets[-2] (:struct offset-3d))
  (:dst-subresource (:struct image-subresource-layers))
  (:dst-offsets[-2] (:struct offset-3d)))

(defcstruct image-copy
  (:src-subresource (:struct image-subresource-layers))
  (:src-offset (:struct offset-3d))
  (:dst-subresource (:struct image-subresource-layers))
  (:dst-offset (:struct offset-3d))
  (:extent (:struct extent-3d)))

(defcstruct image-create-info
  (:s-type structure-type)#|must-be image-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags image-create-flags)#|optional (true)|#
  (:image-type image-type)
  (:format format)
  (:extent (:struct extent-3d))
  (:mip-levels :uint32)
  (:array-layers :uint32)
  (:samples sample-count-flag-bits)
  (:tiling image-tiling)
  (:usage image-usage-flags)
  (:sharing-mode sharing-mode)
  (:queue-family-index-count :uint32)#|optional (true)|#
  (:p-queue-family-indices (:pointer :uint32))#|len (queue-family-index-count)|#
  (:initial-layout image-layout))

(defcstruct image-format-properties
  (:max-extent (:struct extent-3d))
  (:max-mip-levels :uint32)
  (:max-array-layers :uint32)
  (:sample-counts sample-count-flags)#|optional (true)|#
  (:max-resource-size device-size))

(defcstruct image-subresource-range
  (:aspect-mask image-aspect-flags)
  (:base-mip-level :uint32)
  (:level-count :uint32)
  (:base-array-layer :uint32)
  (:layer-count :uint32))

(defcstruct image-memory-barrier
  (:s-type structure-type)#|must-be image-memory-barrier|#
  (:p-next (:pointer :void))#|opaque t|#
  (:src-access-mask access-flags)#|optional (true)|#
  (:dst-access-mask access-flags)#|optional (true)|#
  (:old-layout image-layout)
  (:new-layout image-layout)
  (:src-queue-family-index :uint32)
  (:dst-queue-family-index :uint32)
  (:image image)
  (:subresource-range (:struct image-subresource-range)))

(defcstruct image-resolve
  (:src-subresource (:struct image-subresource-layers))
  (:src-offset (:struct offset-3d))
  (:dst-subresource (:struct image-subresource-layers))
  (:dst-offset (:struct offset-3d))
  (:extent (:struct extent-3d)))

(defcstruct image-subresource
  (:aspect-mask image-aspect-flags)
  (:mip-level :uint32)
  (:array-layer :uint32))

(defcstruct image-subresource-layers
  (:aspect-mask image-aspect-flags)
  (:mip-level :uint32)
  (:base-array-layer :uint32)
  (:layer-count :uint32))

(defcstruct image-subresource-range
  (:aspect-mask image-aspect-flags)
  (:base-mip-level :uint32)
  (:level-count :uint32)
  (:base-array-layer :uint32)
  (:layer-count :uint32))

(defcstruct component-mapping
  (:r component-swizzle)
  (:g component-swizzle)
  (:b component-swizzle)
  (:a component-swizzle))

(defcstruct image-view-create-info
  (:s-type structure-type)#|must-be image-view-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags image-view-create-flags)#|optional (true)|#
  (:image image)
  (:view-type image-view-type)
  (:format format)
  (:components (:struct component-mapping))
  (:subresource-range (:struct image-subresource-range)))

(defcstruct application-info
  (:s-type structure-type)#|must-be application-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:p-application-name (:pointer :char))#|optional (true) len (null-terminated)|#
  (:application-version :uint32)
  (:p-engine-name (:pointer :char))#|optional (true) len (null-terminated)|#
  (:engine-version :uint32)
  (:api-version :uint32))

(defcstruct instance-create-info
  (:s-type structure-type)#|must-be instance-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags instance-create-flags)#|optional (true)|#
  (:p-application-info (:pointer (:struct application-info)))#|optional (true)|#
  (:enabled-layer-count :uint32)#|optional (true)|#
  (:pp-enabled-layer-names (:pointer (:pointer :char)))#|len (enabled-layer-count
                                                              null-terminated)|#
  (:enabled-extension-count :uint32)#|optional (true)|#
  (:pp-enabled-extension-names (:pointer (:pointer :char)))#|len (enabled-extension-count
                                                                  null-terminated)|#)

(defcstruct layer-properties
  (:layer-name :char :count 256)
  (:spec-version :uint32)
  (:implementation-version :uint32)
  (:description :char :count 256))

(defcstruct mapped-memory-range
  (:s-type structure-type)#|must-be mapped-memory-range|#
  (:p-next (:pointer :void))#|opaque t|#
  (:memory device-memory)
  (:offset device-size)
  (:size device-size))

(defcstruct memory-allocate-info
  (:s-type structure-type)#|must-be memory-allocate-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:allocation-size device-size)
  (:memory-type-index :uint32))

(defcstruct memory-barrier
  (:s-type structure-type)#|must-be memory-barrier|#
  (:p-next (:pointer :void))#|opaque t|#
  (:src-access-mask access-flags)#|optional (true)|#
  (:dst-access-mask access-flags)#|optional (true)|#)

(defcstruct memory-heap
  (:size device-size)
  (:flags memory-heap-flags)#|optional (true)|#)

(defcstruct memory-requirements
  (:size device-size)
  (:alignment device-size)
  (:memory-type-bits :uint32))

(defcstruct memory-type
  (:property-flags memory-property-flags)#|optional (true)|#
  (:heap-index :uint32))

(defcstruct mir-surface-create-info-khr
  (:s-type structure-type)#|must-be mir-surface-create-info-khr|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags mir-surface-create-flags-khr)#|optional (true)|#
  (:connection (:pointer mir-connection))#|opaque t|#
  (:mir-surface (:pointer mir-surface))#|opaque t|#)

(defcstruct offset-2d
  (:x :int32)
  (:y :int32))

(defcstruct offset-3d
  (:x :int32)
  (:y :int32)
  (:z :int32))

(defcstruct physical-device-features
  (:robust-buffer-access bool32)
  (:full-draw-index-uint-32 bool32)
  (:image-cube-array bool32)
  (:independent-blend bool32)
  (:geometry-shader bool32)
  (:tessellation-shader bool32)
  (:sample-rate-shading bool32)
  (:dual-src-blend bool32)
  (:logic-op bool32)
  (:multi-draw-indirect bool32)
  (:draw-indirect-first-instance bool32)
  (:depth-clamp bool32)
  (:depth-bias-clamp bool32)
  (:fill-mode-non-solid bool32)
  (:depth-bounds bool32)
  (:wide-lines bool32)
  (:large-points bool32)
  (:alpha-to-one bool32)
  (:multi-viewport bool32)
  (:sampler-anisotropy bool32)
  (:texture-compression-etc2 bool32)
  (:texture-compression-astc_-ldr bool32)
  (:texture-compression-bc bool32)
  (:occlusion-query-precise bool32)
  (:pipeline-statistics-query bool32)
  (:vertex-pipeline-stores-and-atomics bool32)
  (:fragment-stores-and-atomics bool32)
  (:shader-tessellation-and-geometry-point-size bool32)
  (:shader-image-gather-extended bool32)
  (:shader-storage-image-extended-formats bool32)
  (:shader-storage-image-multisample bool32)
  (:shader-storage-image-read-without-format bool32)
  (:shader-storage-image-write-without-format bool32)
  (:shader-uniform-buffer-array-dynamic-indexing bool32)
  (:shader-sampled-image-array-dynamic-indexing bool32)
  (:shader-storage-buffer-array-dynamic-indexing bool32)
  (:shader-storage-image-array-dynamic-indexing bool32)
  (:shader-clip-distance bool32)
  (:shader-cull-distance bool32)
  (:shader-float-64 bool32)
  (:shader-int-64 bool32)
  (:shader-int-16 bool32)
  (:shader-resource-residency bool32)
  (:shader-resource-min-lod bool32)
  (:sparse-binding bool32)
  (:sparse-residency-buffer bool32)
  (:sparse-residency-image-2d bool32)
  (:sparse-residency-image-3d bool32)
  (:sparse-residency-2-samples bool32)
  (:sparse-residency-4-samples bool32)
  (:sparse-residency-8-samples bool32)
  (:sparse-residency-16-samples bool32)
  (:sparse-residency-aliased bool32)
  (:variable-multisample-rate bool32)
  (:inherited-queries bool32))

(defcstruct physical-device-limits
  (:max-image-dimension-1d :uint32)
  (:max-image-dimension-2d :uint32)
  (:max-image-dimension-3d :uint32)
  (:max-image-dimension-cube :uint32)
  (:max-image-array-layers :uint32)
  (:max-texel-buffer-elements :uint32)
  (:max-uniform-buffer-range :uint32)
  (:max-storage-buffer-range :uint32)
  (:max-push-constants-size :uint32)
  (:max-memory-allocation-count :uint32)
  (:max-sampler-allocation-count :uint32)
  (:buffer-image-granularity device-size)
  (:sparse-address-space-size device-size)
  (:max-bound-descriptor-sets :uint32)
  (:max-per-stage-descriptor-samplers :uint32)
  (:max-per-stage-descriptor-uniform-buffers :uint32)
  (:max-per-stage-descriptor-storage-buffers :uint32)
  (:max-per-stage-descriptor-sampled-images :uint32)
  (:max-per-stage-descriptor-storage-images :uint32)
  (:max-per-stage-descriptor-input-attachments :uint32)
  (:max-per-stage-resources :uint32)
  (:max-descriptor-set-samplers :uint32)
  (:max-descriptor-set-uniform-buffers :uint32)
  (:max-descriptor-set-uniform-buffers-dynamic :uint32)
  (:max-descriptor-set-storage-buffers :uint32)
  (:max-descriptor-set-storage-buffers-dynamic :uint32)
  (:max-descriptor-set-sampled-images :uint32)
  (:max-descriptor-set-storage-images :uint32)
  (:max-descriptor-set-input-attachments :uint32)
  (:max-vertex-input-attributes :uint32)
  (:max-vertex-input-bindings :uint32)
  (:max-vertex-input-attribute-offset :uint32)
  (:max-vertex-input-binding-stride :uint32)
  (:max-vertex-output-components :uint32)
  (:max-tessellation-generation-level :uint32)
  (:max-tessellation-patch-size :uint32)
  (:max-tessellation-control-per-vertex-input-components :uint32)
  (:max-tessellation-control-per-vertex-output-components :uint32)
  (:max-tessellation-control-per-patch-output-components :uint32)
  (:max-tessellation-control-total-output-components :uint32)
  (:max-tessellation-evaluation-input-components :uint32)
  (:max-tessellation-evaluation-output-components :uint32)
  (:max-geometry-shader-invocations :uint32)
  (:max-geometry-input-components :uint32)
  (:max-geometry-output-components :uint32)
  (:max-geometry-output-vertices :uint32)
  (:max-geometry-total-output-components :uint32)
  (:max-fragment-input-components :uint32)
  (:max-fragment-output-attachments :uint32)
  (:max-fragment-dual-src-attachments :uint32)
  (:max-fragment-combined-output-resources :uint32)
  (:max-compute-shared-memory-size :uint32)
  (:max-compute-work-group-count :uint32 :count 3)
  (:max-compute-work-group-invocations :uint32)
  (:max-compute-work-group-size :uint32 :count 3)
  (:sub-pixel-precision-bits :uint32)
  (:sub-texel-precision-bits :uint32)
  (:mipmap-precision-bits :uint32)
  (:max-draw-indexed-index-value :uint32)
  (:max-draw-indirect-count :uint32)
  (:max-sampler-lod-bias :float)
  (:max-sampler-anisotropy :float)
  (:max-viewports :uint32)
  (:max-viewport-dimensions :uint32 :count 2)
  (:viewport-bounds-range :float :count 2)
  (:viewport-sub-pixel-bits :uint32)
  (:min-memory-map-alignment size-t)
  (:min-texel-buffer-offset-alignment device-size)
  (:min-uniform-buffer-offset-alignment device-size)
  (:min-storage-buffer-offset-alignment device-size)
  (:min-texel-offset :int32)
  (:max-texel-offset :uint32)
  (:min-texel-gather-offset :int32)
  (:max-texel-gather-offset :uint32)
  (:min-interpolation-offset :float)
  (:max-interpolation-offset :float)
  (:sub-pixel-interpolation-offset-bits :uint32)
  (:max-framebuffer-width :uint32)
  (:max-framebuffer-height :uint32)
  (:max-framebuffer-layers :uint32)
  (:framebuffer-color-sample-counts sample-count-flags)#|optional (true)|#
  (:framebuffer-depth-sample-counts sample-count-flags)#|optional (true)|#
  (:framebuffer-stencil-sample-counts sample-count-flags)#|optional (true)|#
  (:framebuffer-no-attachments-sample-counts sample-count-flags)#|optional (true)|#
  (:max-color-attachments :uint32)
  (:sampled-image-color-sample-counts sample-count-flags)#|optional (true)|#
  (:sampled-image-integer-sample-counts sample-count-flags)#|optional (true)|#
  (:sampled-image-depth-sample-counts sample-count-flags)#|optional (true)|#
  (:sampled-image-stencil-sample-counts sample-count-flags)#|optional (true)|#
  (:storage-image-sample-counts sample-count-flags)#|optional (true)|#
  (:max-sample-mask-words :uint32)
  (:timestamp-compute-and-graphics bool32)
  (:timestamp-period :float)
  (:max-clip-distances :uint32)
  (:max-cull-distances :uint32)
  (:max-combined-clip-and-cull-distances :uint32)
  (:discrete-queue-priorities :uint32)
  (:point-size-range :float :count 2)
  (:line-width-range :float :count 2)
  (:point-size-granularity :float)
  (:line-width-granularity :float)
  (:strict-lines bool32)
  (:standard-sample-locations bool32)
  (:optimal-buffer-copy-offset-alignment device-size)
  (:optimal-buffer-copy-row-pitch-alignment device-size)
  (:non-coherent-atom-size device-size))

(defcstruct memory-type
  (:property-flags memory-property-flags)#|optional (true)|#
  (:heap-index :uint32))

(defcstruct memory-heap
  (:size device-size)
  (:flags memory-heap-flags)#|optional (true)|#)

(defcstruct physical-device-memory-properties
  (:memory-type-count :uint32)
  (:memory-types (:struct memory-type) :count 32)
  (:memory-heap-count :uint32)
  (:memory-heaps (:struct memory-heap) :count 16))

(defcstruct physical-device-limits
  (:max-image-dimension-1d :uint32)
  (:max-image-dimension-2d :uint32)
  (:max-image-dimension-3d :uint32)
  (:max-image-dimension-cube :uint32)
  (:max-image-array-layers :uint32)
  (:max-texel-buffer-elements :uint32)
  (:max-uniform-buffer-range :uint32)
  (:max-storage-buffer-range :uint32)
  (:max-push-constants-size :uint32)
  (:max-memory-allocation-count :uint32)
  (:max-sampler-allocation-count :uint32)
  (:buffer-image-granularity device-size)
  (:sparse-address-space-size device-size)
  (:max-bound-descriptor-sets :uint32)
  (:max-per-stage-descriptor-samplers :uint32)
  (:max-per-stage-descriptor-uniform-buffers :uint32)
  (:max-per-stage-descriptor-storage-buffers :uint32)
  (:max-per-stage-descriptor-sampled-images :uint32)
  (:max-per-stage-descriptor-storage-images :uint32)
  (:max-per-stage-descriptor-input-attachments :uint32)
  (:max-per-stage-resources :uint32)
  (:max-descriptor-set-samplers :uint32)
  (:max-descriptor-set-uniform-buffers :uint32)
  (:max-descriptor-set-uniform-buffers-dynamic :uint32)
  (:max-descriptor-set-storage-buffers :uint32)
  (:max-descriptor-set-storage-buffers-dynamic :uint32)
  (:max-descriptor-set-sampled-images :uint32)
  (:max-descriptor-set-storage-images :uint32)
  (:max-descriptor-set-input-attachments :uint32)
  (:max-vertex-input-attributes :uint32)
  (:max-vertex-input-bindings :uint32)
  (:max-vertex-input-attribute-offset :uint32)
  (:max-vertex-input-binding-stride :uint32)
  (:max-vertex-output-components :uint32)
  (:max-tessellation-generation-level :uint32)
  (:max-tessellation-patch-size :uint32)
  (:max-tessellation-control-per-vertex-input-components :uint32)
  (:max-tessellation-control-per-vertex-output-components :uint32)
  (:max-tessellation-control-per-patch-output-components :uint32)
  (:max-tessellation-control-total-output-components :uint32)
  (:max-tessellation-evaluation-input-components :uint32)
  (:max-tessellation-evaluation-output-components :uint32)
  (:max-geometry-shader-invocations :uint32)
  (:max-geometry-input-components :uint32)
  (:max-geometry-output-components :uint32)
  (:max-geometry-output-vertices :uint32)
  (:max-geometry-total-output-components :uint32)
  (:max-fragment-input-components :uint32)
  (:max-fragment-output-attachments :uint32)
  (:max-fragment-dual-src-attachments :uint32)
  (:max-fragment-combined-output-resources :uint32)
  (:max-compute-shared-memory-size :uint32)
  (:max-compute-work-group-count :uint32 :count 3)
  (:max-compute-work-group-invocations :uint32)
  (:max-compute-work-group-size :uint32 :count 3)
  (:sub-pixel-precision-bits :uint32)
  (:sub-texel-precision-bits :uint32)
  (:mipmap-precision-bits :uint32)
  (:max-draw-indexed-index-value :uint32)
  (:max-draw-indirect-count :uint32)
  (:max-sampler-lod-bias :float)
  (:max-sampler-anisotropy :float)
  (:max-viewports :uint32)
  (:max-viewport-dimensions :uint32 :count 2)
  (:viewport-bounds-range :float :count 2)
  (:viewport-sub-pixel-bits :uint32)
  (:min-memory-map-alignment size-t)
  (:min-texel-buffer-offset-alignment device-size)
  (:min-uniform-buffer-offset-alignment device-size)
  (:min-storage-buffer-offset-alignment device-size)
  (:min-texel-offset :int32)
  (:max-texel-offset :uint32)
  (:min-texel-gather-offset :int32)
  (:max-texel-gather-offset :uint32)
  (:min-interpolation-offset :float)
  (:max-interpolation-offset :float)
  (:sub-pixel-interpolation-offset-bits :uint32)
  (:max-framebuffer-width :uint32)
  (:max-framebuffer-height :uint32)
  (:max-framebuffer-layers :uint32)
  (:framebuffer-color-sample-counts sample-count-flags)#|optional (true)|#
  (:framebuffer-depth-sample-counts sample-count-flags)#|optional (true)|#
  (:framebuffer-stencil-sample-counts sample-count-flags)#|optional (true)|#
  (:framebuffer-no-attachments-sample-counts sample-count-flags)#|optional (true)|#
  (:max-color-attachments :uint32)
  (:sampled-image-color-sample-counts sample-count-flags)#|optional (true)|#
  (:sampled-image-integer-sample-counts sample-count-flags)#|optional (true)|#
  (:sampled-image-depth-sample-counts sample-count-flags)#|optional (true)|#
  (:sampled-image-stencil-sample-counts sample-count-flags)#|optional (true)|#
  (:storage-image-sample-counts sample-count-flags)#|optional (true)|#
  (:max-sample-mask-words :uint32)
  (:timestamp-compute-and-graphics bool32)
  (:timestamp-period :float)
  (:max-clip-distances :uint32)
  (:max-cull-distances :uint32)
  (:max-combined-clip-and-cull-distances :uint32)
  (:discrete-queue-priorities :uint32)
  (:point-size-range :float :count 2)
  (:line-width-range :float :count 2)
  (:point-size-granularity :float)
  (:line-width-granularity :float)
  (:strict-lines bool32)
  (:standard-sample-locations bool32)
  (:optimal-buffer-copy-offset-alignment device-size)
  (:optimal-buffer-copy-row-pitch-alignment device-size)
  (:non-coherent-atom-size device-size))

(defcstruct physical-device-sparse-properties
  (:residency-standard-2d-block-shape bool32)
  (:residency-standard-2d-multisample-block-shape bool32)
  (:residency-standard-3d-block-shape bool32)
  (:residency-aligned-mip-size bool32)
  (:residency-non-resident-strict bool32))

(defcstruct physical-device-properties
  (:api-version :uint32)
  (:driver-version :uint32)
  (:vendor-id :uint32)
  (:device-id :uint32)
  (:device-type physical-device-type)
  (:device-name :char :count 256)
  (:pipeline-cache-uuid :uint8 :count 16)
  (:limits (:struct physical-device-limits))
  (:sparse-properties (:struct physical-device-sparse-properties)))

(defcstruct physical-device-sparse-properties
  (:residency-standard-2d-block-shape bool32)
  (:residency-standard-2d-multisample-block-shape bool32)
  (:residency-standard-3d-block-shape bool32)
  (:residency-aligned-mip-size bool32)
  (:residency-non-resident-strict bool32))

(defcstruct pipeline-cache-create-info
  (:s-type structure-type)#|must-be pipeline-cache-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-cache-create-flags)#|optional (true)|#
  (:initial-data-size size-t)#|optional (true)|#
  (:p-initial-data (:pointer :void))#|len (initial-data-size) opaque t|#)

(defcstruct pipeline-color-blend-attachment-state
  (:blend-enable bool32)
  (:src-color-blend-factor blend-factor)
  (:dst-color-blend-factor blend-factor)
  (:color-blend-op blend-op)
  (:src-alpha-blend-factor blend-factor)
  (:dst-alpha-blend-factor blend-factor)
  (:alpha-blend-op blend-op)
  (:color-write-mask color-component-flags)#|optional (true)|#)

(defcstruct pipeline-color-blend-state-create-info
  (:s-type structure-type)#|must-be pipeline-color-blend-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-color-blend-state-create-flags)#|optional (true)|#
  (:logic-op-enable bool32)
  (:logic-op logic-op)
  (:attachment-count :uint32)#|optional (true)|#
  (:p-attachments (:pointer (:struct pipeline-color-blend-attachment-state)))#|len (attachment-count)|#
  (:blend-constants :float :count 4))

(defcstruct pipeline-depth-stencil-state-create-info
  (:s-type structure-type)#|must-be pipeline-depth-stencil-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-depth-stencil-state-create-flags)#|optional (true)|#
  (:depth-test-enable bool32)
  (:depth-write-enable bool32)
  (:depth-compare-op compare-op)
  (:depth-bounds-test-enable bool32)
  (:stencil-test-enable bool32)
  (:front (:struct stencil-op-state))
  (:back (:struct stencil-op-state))
  (:min-depth-bounds :float)
  (:max-depth-bounds :float))

(defcstruct pipeline-dynamic-state-create-info
  (:s-type structure-type)#|must-be pipeline-dynamic-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-dynamic-state-create-flags)#|optional (true)|#
  (:dynamic-state-count :uint32)
  (:p-dynamic-states (:pointer dynamic-state))#|len (dynamic-state-count)|#)

(defcstruct pipeline-input-assembly-state-create-info
  (:s-type structure-type)#|must-be pipeline-input-assembly-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-input-assembly-state-create-flags)#|optional (true)|#
  (:topology primitive-topology)
  (:primitive-restart-enable bool32))

(defcstruct push-constant-range
  (:stage-flags shader-stage-flags)
  (:offset :uint32)
  (:size :uint32))

(defcstruct pipeline-layout-create-info
  (:s-type structure-type)#|must-be pipeline-layout-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-layout-create-flags)#|optional (true)|#
  (:set-layout-count :uint32)#|optional (true)|#
  (:p-set-layouts (:pointer descriptor-set-layout))#|len (set-layout-count)|#
  (:push-constant-range-count :uint32)#|optional (true)|#
  (:p-push-constant-ranges (:pointer (:struct push-constant-range)))#|len (push-constant-range-count)|#)

(defcstruct pipeline-multisample-state-create-info
  (:s-type structure-type)#|must-be pipeline-multisample-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-multisample-state-create-flags)#|optional (true)|#
  (:rasterization-samples sample-count-flag-bits)
  (:sample-shading-enable bool32)
  (:min-sample-shading :float)
  (:p-sample-mask (:pointer sample-mask))#|optional (true) len (latexmath:[$\lceil{\mathit{rasterizationsamples} \over 32}\rceil$])|#
  (:alpha-to-coverage-enable bool32)
  (:alpha-to-one-enable bool32))

(defcstruct pipeline-rasterization-state-create-info
  (:s-type structure-type)#|must-be pipeline-rasterization-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-rasterization-state-create-flags)#|optional (true)|#
  (:depth-clamp-enable bool32)
  (:rasterizer-discard-enable bool32)
  (:polygon-mode polygon-mode)
  (:cull-mode cull-mode-flags)#|optional (true)|#
  (:front-face front-face)
  (:depth-bias-enable bool32)
  (:depth-bias-constant-factor :float)
  (:depth-bias-clamp :float)
  (:depth-bias-slope-factor :float)
  (:line-width :float))

(defcstruct pipeline-shader-stage-create-info
  (:s-type structure-type)#|must-be pipeline-shader-stage-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-shader-stage-create-flags)#|optional (true)|#
  (:stage shader-stage-flag-bits)
  (:module shader-module)
  (:p-name (:pointer :char))#|len (null-terminated)|#
  (:p-specialization-info (:pointer (:struct specialization-info)))#|optional (true)|#)

(defcstruct pipeline-tessellation-state-create-info
  (:s-type structure-type)#|must-be pipeline-tessellation-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-tessellation-state-create-flags)#|optional (true)|#
  (:patch-control-points :uint32))

(defcstruct pipeline-vertex-input-state-create-info
  (:s-type structure-type)#|must-be pipeline-vertex-input-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-vertex-input-state-create-flags)#|optional (true)|#
  (:vertex-binding-description-count :uint32)#|optional (true)|#
  (:p-vertex-binding-descriptions (:pointer
                                   (:struct vertex-input-binding-description)))#|len (vertex-binding-description-count)|#
  (:vertex-attribute-description-count :uint32)#|optional (true)|#
  (:p-vertex-attribute-descriptions (:pointer
                                     (:struct
                                      vertex-input-attribute-description)))#|len (vertex-attribute-description-count)|#)

(defcstruct pipeline-viewport-state-create-info
  (:s-type structure-type)#|must-be pipeline-viewport-state-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags pipeline-viewport-state-create-flags)#|optional (true)|#
  (:viewport-count :uint32)
  (:p-viewports (:pointer (:struct viewport)))#|optional (true) len (viewport-count)|#
  (:scissor-count :uint32)
  (:p-scissors (:pointer (:struct rect-2d)))#|optional (true) len (scissor-count)|#)

(defcstruct present-info-khr
  (:s-type structure-type)#|must-be present-info-khr|#
  (:p-next (:pointer :void))#|opaque t|#
  (:wait-semaphore-count :uint32)
  (:p-wait-semaphores (:pointer semaphore))#|optional (true) len (wait-semaphore-count)|#
  (:swapchain-count :uint32)
  (:p-swapchains (:pointer swapchain-khr))#|len (swapchain-count)|#
  (:p-image-indices (:pointer :uint32))#|len (swapchain-count)|#
  (:p-results (:pointer result))#|optional (true) len (swapchain-count)|#)

(defcstruct push-constant-range
  (:stage-flags shader-stage-flags)
  (:offset :uint32)
  (:size :uint32))

(defcstruct query-pool-create-info
  (:s-type structure-type)#|must-be query-pool-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags query-pool-create-flags)#|optional (true)|#
  (:query-type query-type)
  (:query-count :uint32)
  (:pipeline-statistics query-pipeline-statistic-flags)#|optional (true)|#)

(defcstruct queue-family-properties
  (:queue-flags queue-flags)#|optional (true)|#
  (:queue-count :uint32)
  (:timestamp-valid-bits :uint32)
  (:min-image-transfer-granularity (:struct extent-3d)))

(defcstruct rect-2d
  (:offset (:struct offset-2d))
  (:extent (:struct extent-2d)))

(defcstruct rect-3d
  (:offset (:struct offset-3d))
  (:extent (:struct extent-3d)))

(defcstruct render-pass-begin-info
  (:s-type structure-type)#|must-be render-pass-begin-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:render-pass render-pass)
  (:framebuffer framebuffer)
  (:render-area (:struct rect-2d))
  (:clear-value-count :uint32)#|optional (true)|#
  (:p-clear-values (:pointer (:union clear-value)))#|len (clear-value-count)|#)

(defcstruct attachment-description
  (:flags attachment-description-flags)#|optional (true)|#
  (:format format)
  (:samples sample-count-flag-bits)
  (:load-op attachment-load-op)
  (:store-op attachment-store-op)
  (:stencil-load-op attachment-load-op)
  (:stencil-store-op attachment-store-op)
  (:initial-layout image-layout)
  (:final-layout image-layout))

(defcstruct attachment-reference
  (:attachment :uint32)
  (:layout image-layout))

(defcstruct subpass-description
  (:flags subpass-description-flags)#|optional (true)|#
  (:pipeline-bind-point pipeline-bind-point)
  (:input-attachment-count :uint32)#|optional (true)|#
  (:p-input-attachments (:pointer (:struct attachment-reference)))#|len (input-attachment-count)|#
  (:color-attachment-count :uint32)#|optional (true)|#
  (:p-color-attachments (:pointer (:struct attachment-reference)))#|len (color-attachment-count)|#
  (:p-resolve-attachments (:pointer (:struct attachment-reference)))#|optional (true) len (color-attachment-count)|#
  (:p-depth-stencil-attachment (:pointer (:struct attachment-reference)))#|optional (true)|#
  (:preserve-attachment-count :uint32)#|optional (true)|#
  (:p-preserve-attachments (:pointer :uint32))#|len (preserve-attachment-count)|#)

(defcstruct subpass-dependency
  (:src-subpass :uint32)
  (:dst-subpass :uint32)
  (:src-stage-mask pipeline-stage-flags)
  (:dst-stage-mask pipeline-stage-flags)
  (:src-access-mask access-flags)#|optional (true)|#
  (:dst-access-mask access-flags)#|optional (true)|#
  (:dependency-flags dependency-flags)#|optional (true)|#)

(defcstruct render-pass-create-info
  (:s-type structure-type)#|must-be render-pass-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags render-pass-create-flags)#|optional (true)|#
  (:attachment-count :uint32)#|optional (true)|#
  (:p-attachments (:pointer (:struct attachment-description)))#|len (attachment-count)|#
  (:subpass-count :uint32)
  (:p-subpasses (:pointer (:struct subpass-description)))#|len (subpass-count)|#
  (:dependency-count :uint32)#|optional (true)|#
  (:p-dependencies (:pointer (:struct subpass-dependency)))#|len (dependency-count)|#)

(defcstruct sampler-create-info
  (:s-type structure-type)#|must-be sampler-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags sampler-create-flags)#|optional (true)|#
  (:mag-filter filter)
  (:min-filter filter)
  (:mipmap-mode sampler-mipmap-mode)
  (:address-mode-u sampler-address-mode)
  (:address-mode-v sampler-address-mode)
  (:address-mode-w sampler-address-mode)
  (:mip-lod-bias :float)
  (:anisotropy-enable bool32)
  (:max-anisotropy :float)
  (:compare-enable bool32)
  (:compare-op compare-op)
  (:min-lod :float)
  (:max-lod :float)
  (:border-color border-color)
  (:unnormalized-coordinates bool32))

(defcstruct semaphore-create-info
  (:s-type structure-type)#|must-be semaphore-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags semaphore-create-flags)#|optional (true)|#)

(defcstruct shader-module-create-info
  (:s-type structure-type)#|must-be shader-module-create-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags shader-module-create-flags)#|optional (true)|#
  (:code-size size-t)
  (:p-code (:pointer :uint32))#|len (codesize/4)|#)

(defcstruct sparse-buffer-memory-bind-info
  (:buffer buffer)
  (:bind-count :uint32)
  (:p-binds (:pointer (:struct sparse-memory-bind)))#|len (bind-count)|#)

(defcstruct sparse-image-format-properties
  (:aspect-mask image-aspect-flags)#|optional (true)|#
  (:image-granularity (:struct extent-3d))
  (:flags sparse-image-format-flags)#|optional (true)|#)

(defcstruct sparse-image-memory-bind
  (:subresource (:struct image-subresource))
  (:offset (:struct offset-3d))
  (:extent (:struct extent-3d))
  (:memory device-memory)#|optional (true)|#
  (:memory-offset device-size)
  (:flags sparse-memory-bind-flags)#|optional (true)|#)

(defcstruct sparse-image-memory-bind-info
  (:image image)
  (:bind-count :uint32)
  (:p-binds (:pointer (:struct sparse-image-memory-bind)))#|len (bind-count)|#)

(defcstruct sparse-image-format-properties
  (:aspect-mask image-aspect-flags)#|optional (true)|#
  (:image-granularity (:struct extent-3d))
  (:flags sparse-image-format-flags)#|optional (true)|#)

(defcstruct sparse-image-memory-requirements
  (:format-properties (:struct sparse-image-format-properties))
  (:image-mip-tail-first-lod :uint32)
  (:image-mip-tail-size device-size)
  (:image-mip-tail-offset device-size)
  (:image-mip-tail-stride device-size))

(defcstruct sparse-image-opaque-memory-bind-info
  (:image image)
  (:bind-count :uint32)
  (:p-binds (:pointer (:struct sparse-memory-bind)))#|len (bind-count)|#)

(defcstruct sparse-memory-bind
  (:resource-offset device-size)
  (:size device-size)
  (:memory device-memory)#|optional (true)|#
  (:memory-offset device-size)
  (:flags sparse-memory-bind-flags)#|optional (true)|#)

(defcstruct specialization-info
  (:map-entry-count :uint32)#|optional (true)|#
  (:p-map-entries (:pointer (:struct specialization-map-entry)))#|len (map-entry-count)|#
  (:data-size size-t)#|optional (true)|#
  (:p-data (:pointer :void))#|len (data-size) opaque t|#)

(defcstruct specialization-map-entry
  (:constant-id :uint32)
  (:offset :uint32)
  (:size size-t))

(defcstruct stencil-op-state
  (:fail-op stencil-op)
  (:pass-op stencil-op)
  (:depth-fail-op stencil-op)
  (:compare-op compare-op)
  (:compare-mask :uint32)
  (:write-mask :uint32)
  (:reference :uint32))

(defcstruct submit-info
  (:s-type structure-type)#|must-be submit-info|#
  (:p-next (:pointer :void))#|opaque t|#
  (:wait-semaphore-count :uint32)#|optional (true)|#
  (:p-wait-semaphores (:pointer semaphore))#|len (wait-semaphore-count)|#
  (:p-wait-dst-stage-mask (:pointer pipeline-stage-flags))#|len (wait-semaphore-count)|#
  (:command-buffer-count :uint32)#|optional (true)|#
  (:p-command-buffers (:pointer command-buffer))#|len (command-buffer-count)|#
  (:signal-semaphore-count :uint32)#|optional (true)|#
  (:p-signal-semaphores (:pointer semaphore))#|len (signal-semaphore-count)|#)

(defcstruct subpass-dependency
  (:src-subpass :uint32)
  (:dst-subpass :uint32)
  (:src-stage-mask pipeline-stage-flags)
  (:dst-stage-mask pipeline-stage-flags)
  (:src-access-mask access-flags)#|optional (true)|#
  (:dst-access-mask access-flags)#|optional (true)|#
  (:dependency-flags dependency-flags)#|optional (true)|#)

(defcstruct subpass-description
  (:flags subpass-description-flags)#|optional (true)|#
  (:pipeline-bind-point pipeline-bind-point)
  (:input-attachment-count :uint32)#|optional (true)|#
  (:p-input-attachments (:pointer (:struct attachment-reference)))#|len (input-attachment-count)|#
  (:color-attachment-count :uint32)#|optional (true)|#
  (:p-color-attachments (:pointer (:struct attachment-reference)))#|len (color-attachment-count)|#
  (:p-resolve-attachments (:pointer (:struct attachment-reference)))#|optional (true) len (color-attachment-count)|#
  (:p-depth-stencil-attachment (:pointer (:struct attachment-reference)))#|optional (true)|#
  (:preserve-attachment-count :uint32)#|optional (true)|#
  (:p-preserve-attachments (:pointer :uint32))#|len (preserve-attachment-count)|#)

(defcstruct subresource-layout
  (:offset device-size)
  (:size device-size)
  (:row-pitch device-size)
  (:array-pitch device-size)
  (:depth-pitch device-size))

(defcstruct surface-capabilities-khr
  (:min-image-count :uint32)
  (:max-image-count :uint32)
  (:current-extent (:struct extent-2d))
  (:min-image-extent (:struct extent-2d))
  (:max-image-extent (:struct extent-2d))
  (:max-image-array-layers :uint32)
  (:supported-transforms surface-transform-flags-khr)#|optional (true)|#
  (:current-transform surface-transform-flag-bits-khr)
  (:supported-composite-alpha composite-alpha-flags-khr)#|optional (true)|#
  (:supported-usage-flags image-usage-flags)#|optional (true)|#)

(defcstruct surface-format-khr
  (:format format)
  (:color-space color-space-khr))

(defcstruct swapchain-create-info-khr
  (:s-type structure-type)#|must-be swapchain-create-info-khr|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags swapchain-create-flags-khr)#|optional (true)|#
  (:surface surface-khr)
  (:min-image-count :uint32)
  (:image-format format)
  (:image-color-space color-space-khr)
  (:image-extent (:struct extent-2d))
  (:image-array-layers :uint32)
  (:image-usage image-usage-flags)
  (:image-sharing-mode sharing-mode)
  (:queue-family-index-count :uint32)#|optional (true)|#
  (:p-queue-family-indices (:pointer :uint32))#|len (queue-family-index-count)|#
  (:pre-transform surface-transform-flag-bits-khr)
  (:composite-alpha composite-alpha-flag-bits-khr)
  (:present-mode present-mode-khr)
  (:clipped bool32)
  (:old-swapchain swapchain-khr)#|optional (true)|#)

(defcstruct vertex-input-attribute-description
  (:location :uint32)
  (:binding :uint32)
  (:format format)
  (:offset :uint32))

(defcstruct vertex-input-binding-description
  (:binding :uint32)
  (:stride :uint32)
  (:input-rate vertex-input-rate))

(defcstruct viewport
  (:x :float)
  (:y :float)
  (:width :float)
  (:height :float)
  (:min-depth :float)
  (:max-depth :float))

(defcstruct wayland-surface-create-info-khr
  (:s-type structure-type)#|must-be wayland-surface-create-info-khr|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags wayland-surface-create-flags-khr)#|optional (true)|#
  (:display (:pointer (:struct wl_display)))#|opaque t|#
  (:surface (:pointer (:struct wl_surface)))#|opaque t|#)

(defcstruct win32-surface-create-info-khr
  (:s-type structure-type)#|must-be win32-surface-create-info-khr|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags win32-surface-create-flags-khr)#|optional (true)|#
  (:hinstance hinstance)
  (:hwnd hwnd))

(defcstruct descriptor-image-info
  (:sampler sampler)
  (:image-view image-view)
  (:image-layout image-layout))

(defcstruct descriptor-buffer-info
  (:buffer buffer)
  (:offset device-size)
  (:range device-size))

(defcstruct write-descriptor-set
  (:s-type structure-type)#|must-be write-descriptor-set|#
  (:p-next (:pointer :void))#|opaque t|#
  (:dst-set descriptor-set)
  (:dst-binding :uint32)
  (:dst-array-element :uint32)
  (:descriptor-count :uint32)
  (:descriptor-type descriptor-type)
  (:p-image-info (:pointer (:struct descriptor-image-info)))#|len (descriptor-count)|#
  (:p-buffer-info (:pointer (:struct descriptor-buffer-info)))#|len (descriptor-count)|#
  (:p-texel-buffer-view (:pointer buffer-view))#|len (descriptor-count)|#)

(defcstruct xcb-surface-create-info-khr
  (:s-type structure-type)#|must-be xcb-surface-create-info-khr|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags xcb-surface-create-flags-khr)#|optional (true)|#
  (:connection (:pointer xcb_connection_t))#|opaque t|#
  (:window xcb_window_t))

(defcstruct xlib-surface-create-info-khr
  (:s-type structure-type)#|must-be xlib-surface-create-info-khr|#
  (:p-next (:pointer :void))#|opaque t|#
  (:flags xlib-surface-create-flags-khr)#|optional (true)|#
  (:dpy (:pointer display))#|opaque t|#
  (:window window))

