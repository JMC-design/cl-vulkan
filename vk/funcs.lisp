;;; this file is automatically generated, do not edit
#||
Copyright (c) 2015-2016 The Khronos Group Inc.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and/or associated documentation files (the
"Materials"), to deal in the Materials without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Materials, and to
permit persons to whom the Materials are furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Materials.

THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

------------------------------------------------------------------------
||#

(in-package #:cl-vulkan-bindings)

(defvkfun ("vkAcquireNextImageKHR" acquire-next-image-khr) checked-result
  (device device)
  (swapchain swapchain-khr) ;; :EXTERNSYNC "true"
  (timeout :uint64)
  (semaphore semaphore) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (fence fence) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-image-index (:pointer :uint32)))

(defvkfun ("vkAllocateCommandBuffers" allocate-command-buffers) checked-result
  (device device)
  (p-allocate-info (:pointer (:struct command-buffer-allocate-info))) ;; :EXTERNSYNC "pAllocateInfo->commandPool"
  (p-command-buffers (:pointer command-buffer)) ;; :LEN "pAllocateInfo->commandBufferCount"
)

(defvkfun ("vkAllocateDescriptorSets" allocate-descriptor-sets) checked-result
  (device device)
  (p-allocate-info (:pointer (:struct descriptor-set-allocate-info))) ;; :EXTERNSYNC "pAllocateInfo->descriptorPool"
  (p-descriptor-sets (:pointer descriptor-set)) ;; :LEN "pAllocateInfo->descriptorSetCount"
)

(defvkfun ("vkAllocateMemory" allocate-memory) checked-result
  (device device)
  (p-allocate-info (:pointer (:struct memory-allocate-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-memory (:pointer device-memory)))

(defvkfun ("vkBeginCommandBuffer" begin-command-buffer) checked-result
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (p-begin-info (:pointer (:struct command-buffer-begin-info))))

(defvkfun ("vkBindBufferMemory" bind-buffer-memory) checked-result
  (device device)
  (buffer buffer) ;; :EXTERNSYNC "true"
  (memory device-memory)
  (memory-offset device-size))

(defvkfun ("vkBindImageMemory" bind-image-memory) checked-result
  (device device)
  (image image) ;; :EXTERNSYNC "true"
  (memory device-memory)
  (memory-offset device-size))

(defvkfun ("vkCmdBeginQuery" cmd-begin-query) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (query-pool query-pool)
  (query :uint32)
  (flags query-control-flags) ;; :OPTIONAL "true"
)

(defvkfun ("vkCmdBeginRenderPass" cmd-begin-render-pass) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (p-render-pass-begin (:pointer (:struct render-pass-begin-info)))
  (contents subpass-contents))

(defvkfun ("vkCmdBindDescriptorSets" cmd-bind-descriptor-sets) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (pipeline-bind-point pipeline-bind-point)
  (layout pipeline-layout)
  (first-set :uint32)
  (descriptor-set-count :uint32)
  (p-descriptor-sets (:pointer descriptor-set)) ;; :LEN "descriptorSetCount"
  (dynamic-offset-count :uint32) ;; :OPTIONAL "true"
  (p-dynamic-offsets (:pointer :uint32)) ;; :LEN "dynamicOffsetCount"
)

(defvkfun ("vkCmdBindIndexBuffer" cmd-bind-index-buffer) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (buffer buffer)
  (offset device-size)
  (index-type index-type))

(defvkfun ("vkCmdBindPipeline" cmd-bind-pipeline) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (pipeline-bind-point pipeline-bind-point)
  (pipeline pipeline))

(defvkfun ("vkCmdBindVertexBuffers" cmd-bind-vertex-buffers) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (first-binding :uint32)
  (binding-count :uint32)
  (p-buffers (:pointer buffer)) ;; :LEN "bindingCount"
  (p-offsets (:pointer device-size)) ;; :LEN "bindingCount"
)

(defvkfun ("vkCmdBlitImage" cmd-blit-image) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (src-image image)
  (src-image-layout image-layout)
  (dst-image image)
  (dst-image-layout image-layout)
  (region-count :uint32)
  (p-regions (:pointer (:struct image-blit))) ;; :LEN "regionCount"
  (filter filter))

(defvkfun ("vkCmdClearAttachments" cmd-clear-attachments) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (attachment-count :uint32)
  (p-attachments (:pointer (:struct clear-attachment))) ;; :LEN "attachmentCount"
  (rect-count :uint32)
  (p-rects (:pointer (:struct clear-rect))) ;; :LEN "rectCount"
)

(defvkfun ("vkCmdClearColorImage" cmd-clear-color-image) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (image image)
  (image-layout image-layout)
  (p-color (:pointer (:union clear-color-value)))
  (range-count :uint32)
  (p-ranges (:pointer (:struct image-subresource-range))) ;; :LEN "rangeCount"
)

(defvkfun ("vkCmdClearDepthStencilImage" cmd-clear-depth-stencil-image) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (image image)
  (image-layout image-layout)
  (p-depth-stencil (:pointer (:struct clear-depth-stencil-value)))
  (range-count :uint32)
  (p-ranges (:pointer (:struct image-subresource-range))) ;; :LEN "rangeCount"
)

(defvkfun ("vkCmdCopyBuffer" cmd-copy-buffer) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (src-buffer buffer)
  (dst-buffer buffer)
  (region-count :uint32)
  (p-regions (:pointer (:struct buffer-copy))) ;; :LEN "regionCount"
)

(defvkfun ("vkCmdCopyBufferToImage" cmd-copy-buffer-to-image) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (src-buffer buffer)
  (dst-image image)
  (dst-image-layout image-layout)
  (region-count :uint32)
  (p-regions (:pointer (:struct buffer-image-copy))) ;; :LEN "regionCount"
)

(defvkfun ("vkCmdCopyImage" cmd-copy-image) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (src-image image)
  (src-image-layout image-layout)
  (dst-image image)
  (dst-image-layout image-layout)
  (region-count :uint32)
  (p-regions (:pointer (:struct image-copy))) ;; :LEN "regionCount"
)

(defvkfun ("vkCmdCopyImageToBuffer" cmd-copy-image-to-buffer) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (src-image image)
  (src-image-layout image-layout)
  (dst-buffer buffer)
  (region-count :uint32)
  (p-regions (:pointer (:struct buffer-image-copy))) ;; :LEN "regionCount"
)

(defvkfun ("vkCmdCopyQueryPoolResults" cmd-copy-query-pool-results) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (query-pool query-pool)
  (first-query :uint32)
  (query-count :uint32)
  (dst-buffer buffer)
  (dst-offset device-size)
  (stride device-size)
  (flags query-result-flags) ;; :OPTIONAL "true"
)

(defvkfun ("vkCmdDispatch" cmd-dispatch) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (x :uint32)
  (y :uint32)
  (z :uint32))

(defvkfun ("vkCmdDispatchIndirect" cmd-dispatch-indirect) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (buffer buffer)
  (offset device-size))

(defvkfun ("vkCmdDraw" cmd-draw) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (vertex-count :uint32)
  (instance-count :uint32)
  (first-vertex :uint32)
  (first-instance :uint32))

(defvkfun ("vkCmdDrawIndexed" cmd-draw-indexed) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (index-count :uint32)
  (instance-count :uint32)
  (first-index :uint32)
  (vertex-offset :int32)
  (first-instance :uint32))

(defvkfun ("vkCmdDrawIndexedIndirect" cmd-draw-indexed-indirect) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (buffer buffer)
  (offset device-size)
  (draw-count :uint32)
  (stride :uint32))

(defvkfun ("vkCmdDrawIndirect" cmd-draw-indirect) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (buffer buffer)
  (offset device-size)
  (draw-count :uint32)
  (stride :uint32))

(defvkfun ("vkCmdEndQuery" cmd-end-query) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (query-pool query-pool)
  (query :uint32))

(defvkfun ("vkCmdEndRenderPass" cmd-end-render-pass) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
)

(defvkfun ("vkCmdExecuteCommands" cmd-execute-commands) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (command-buffer-count :uint32)
  (p-command-buffers (:pointer command-buffer)) ;; :LEN "commandBufferCount"
)

(defvkfun ("vkCmdFillBuffer" cmd-fill-buffer) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (dst-buffer buffer)
  (dst-offset device-size)
  (size device-size)
  (data :uint32))

(defvkfun ("vkCmdNextSubpass" cmd-next-subpass) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (contents subpass-contents))

(defvkfun ("vkCmdPipelineBarrier" cmd-pipeline-barrier) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (src-stage-mask pipeline-stage-flags)
  (dst-stage-mask pipeline-stage-flags)
  (dependency-flags dependency-flags) ;; :OPTIONAL "true"
  (memory-barrier-count :uint32) ;; :OPTIONAL "true"
  (p-memory-barriers (:pointer (:struct memory-barrier))) ;; :LEN "memoryBarrierCount"
  (buffer-memory-barrier-count :uint32) ;; :OPTIONAL "true"
  (p-buffer-memory-barriers (:pointer (:struct buffer-memory-barrier))) ;; :LEN "bufferMemoryBarrierCount"
  (image-memory-barrier-count :uint32) ;; :OPTIONAL "true"
  (p-image-memory-barriers (:pointer (:struct image-memory-barrier))) ;; :LEN "imageMemoryBarrierCount"
)

(defvkfun ("vkCmdPushConstants" cmd-push-constants) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (layout pipeline-layout)
  (stage-flags shader-stage-flags)
  (offset :uint32)
  (size :uint32)
  (p-values (:pointer :void)) ;; :LEN "size"
)

(defvkfun ("vkCmdResetEvent" cmd-reset-event) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (event event)
  (stage-mask pipeline-stage-flags))

(defvkfun ("vkCmdResetQueryPool" cmd-reset-query-pool) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (query-pool query-pool)
  (first-query :uint32)
  (query-count :uint32))

(defvkfun ("vkCmdResolveImage" cmd-resolve-image) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (src-image image)
  (src-image-layout image-layout)
  (dst-image image)
  (dst-image-layout image-layout)
  (region-count :uint32)
  (p-regions (:pointer (:struct image-resolve))) ;; :LEN "regionCount"
)

(defvkfun ("vkCmdSetBlendConstants" cmd-set-blend-constants) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (blend-constants :float))

(defvkfun ("vkCmdSetDepthBias" cmd-set-depth-bias) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (depth-bias-constant-factor :float)
  (depth-bias-clamp :float)
  (depth-bias-slope-factor :float))

(defvkfun ("vkCmdSetDepthBounds" cmd-set-depth-bounds) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (min-depth-bounds :float)
  (max-depth-bounds :float))

(defvkfun ("vkCmdSetEvent" cmd-set-event) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (event event)
  (stage-mask pipeline-stage-flags))

(defvkfun ("vkCmdSetLineWidth" cmd-set-line-width) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (line-width :float))

(defvkfun ("vkCmdSetScissor" cmd-set-scissor) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (first-scissor :uint32)
  (scissor-count :uint32)
  (p-scissors (:pointer (:struct rect-2d))) ;; :LEN "scissorCount"
)

(defvkfun ("vkCmdSetStencilCompareMask" cmd-set-stencil-compare-mask) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (face-mask stencil-face-flags)
  (compare-mask :uint32))

(defvkfun ("vkCmdSetStencilReference" cmd-set-stencil-reference) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (face-mask stencil-face-flags)
  (reference :uint32))

(defvkfun ("vkCmdSetStencilWriteMask" cmd-set-stencil-write-mask) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (face-mask stencil-face-flags)
  (write-mask :uint32))

(defvkfun ("vkCmdSetViewport" cmd-set-viewport) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (first-viewport :uint32)
  (viewport-count :uint32)
  (p-viewports (:pointer (:struct viewport))) ;; :LEN "viewportCount"
)

(defvkfun ("vkCmdUpdateBuffer" cmd-update-buffer) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (dst-buffer buffer)
  (dst-offset device-size)
  (data-size device-size)
  (p-data (:pointer :uint32)) ;; :LEN "dataSize/4"
)

(defvkfun ("vkCmdWaitEvents" cmd-wait-events) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (event-count :uint32)
  (p-events (:pointer event)) ;; :LEN "eventCount"
  (src-stage-mask pipeline-stage-flags)
  (dst-stage-mask pipeline-stage-flags)
  (memory-barrier-count :uint32) ;; :OPTIONAL "true"
  (p-memory-barriers (:pointer (:struct memory-barrier))) ;; :LEN "memoryBarrierCount"
  (buffer-memory-barrier-count :uint32) ;; :OPTIONAL "true"
  (p-buffer-memory-barriers (:pointer (:struct buffer-memory-barrier))) ;; :LEN "bufferMemoryBarrierCount"
  (image-memory-barrier-count :uint32) ;; :OPTIONAL "true"
  (p-image-memory-barriers (:pointer (:struct image-memory-barrier))) ;; :LEN "imageMemoryBarrierCount"
)

(defvkfun ("vkCmdWriteTimestamp" cmd-write-timestamp) :void
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (pipeline-stage pipeline-stage-flag-bits)
  (query-pool query-pool)
  (query :uint32))

(defvkfun ("vkCreateAndroidSurfaceKHR" create-android-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct android-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkCreateBuffer" create-buffer) checked-result
  (device device)
  (p-create-info (:pointer (:struct buffer-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-buffer (:pointer buffer)))

(defvkfun ("vkCreateBufferView" create-buffer-view) checked-result
  (device device)
  (p-create-info (:pointer (:struct buffer-view-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-view (:pointer buffer-view)))

(defvkfun ("vkCreateCommandPool" create-command-pool) checked-result
  (device device)
  (p-create-info (:pointer (:struct command-pool-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-command-pool (:pointer command-pool)))

(defvkfun ("vkCreateComputePipelines" create-compute-pipelines) checked-result
  (device device)
  (pipeline-cache pipeline-cache) ;; :OPTIONAL "true"
  (create-info-count :uint32)
  (p-create-infos (:pointer (:struct compute-pipeline-create-info))) ;; :LEN "createInfoCount"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-pipelines (:pointer pipeline)) ;; :LEN "createInfoCount"
)

(defvkfun ("vkCreateDebugReportCallbackEXT" create-debug-report-callback-ext) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct debug-report-callback-create-info-ext)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-callback (:pointer debug-report-callback-ext)))

(defvkfun ("vkCreateDescriptorPool" create-descriptor-pool) checked-result
  (device device)
  (p-create-info (:pointer (:struct descriptor-pool-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-descriptor-pool (:pointer descriptor-pool)))

(defvkfun ("vkCreateDescriptorSetLayout" create-descriptor-set-layout) checked-result
  (device device)
  (p-create-info (:pointer (:struct descriptor-set-layout-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-set-layout (:pointer descriptor-set-layout)))

(defvkfun ("vkCreateDevice" create-device) checked-result
  (physical-device physical-device)
  (p-create-info (:pointer (:struct device-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-device (:pointer device)))

(defvkfun ("vkCreateDisplayModeKHR" create-display-mode-khr) checked-result
  (physical-device physical-device)
  (display display-khr) ;; :EXTERNSYNC "true"
  (p-create-info (:pointer (:struct display-mode-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-mode (:pointer display-mode-khr)))

(defvkfun ("vkCreateDisplayPlaneSurfaceKHR" create-display-plane-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct display-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkCreateEvent" create-event) checked-result
  (device device)
  (p-create-info (:pointer (:struct event-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-event (:pointer event)))

(defvkfun ("vkCreateFence" create-fence) checked-result
  (device device)
  (p-create-info (:pointer (:struct fence-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-fence (:pointer fence)))

(defvkfun ("vkCreateFramebuffer" create-framebuffer) checked-result
  (device device)
  (p-create-info (:pointer (:struct framebuffer-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-framebuffer (:pointer framebuffer)))

(defvkfun ("vkCreateGraphicsPipelines" create-graphics-pipelines) checked-result
  (device device)
  (pipeline-cache pipeline-cache) ;; :OPTIONAL "true"
  (create-info-count :uint32)
  (p-create-infos (:pointer (:struct graphics-pipeline-create-info))) ;; :LEN "createInfoCount"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-pipelines (:pointer pipeline)) ;; :LEN "createInfoCount"
)

(defvkfun ("vkCreateImage" create-image) checked-result
  (device device)
  (p-create-info (:pointer (:struct image-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-image (:pointer image)))

(defvkfun ("vkCreateImageView" create-image-view) checked-result
  (device device)
  (p-create-info (:pointer (:struct image-view-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-view (:pointer image-view)))

(defvkfun ("vkCreateInstance" create-instance) checked-result
  (p-create-info (:pointer (:struct instance-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-instance (:pointer instance)))

(defvkfun ("vkCreateMirSurfaceKHR" create-mir-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct mir-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkCreatePipelineCache" create-pipeline-cache) checked-result
  (device device)
  (p-create-info (:pointer (:struct pipeline-cache-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-pipeline-cache (:pointer pipeline-cache)))

(defvkfun ("vkCreatePipelineLayout" create-pipeline-layout) checked-result
  (device device)
  (p-create-info (:pointer (:struct pipeline-layout-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-pipeline-layout (:pointer pipeline-layout)))

(defvkfun ("vkCreateQueryPool" create-query-pool) checked-result
  (device device)
  (p-create-info (:pointer (:struct query-pool-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-query-pool (:pointer query-pool)))

(defvkfun ("vkCreateRenderPass" create-render-pass) checked-result
  (device device)
  (p-create-info (:pointer (:struct render-pass-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-render-pass (:pointer render-pass)))

(defvkfun ("vkCreateSampler" create-sampler) checked-result
  (device device)
  (p-create-info (:pointer (:struct sampler-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-sampler (:pointer sampler)))

(defvkfun ("vkCreateSemaphore" create-semaphore) checked-result
  (device device)
  (p-create-info (:pointer (:struct semaphore-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-semaphore (:pointer semaphore)))

(defvkfun ("vkCreateShaderModule" create-shader-module) checked-result
  (device device)
  (p-create-info (:pointer (:struct shader-module-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-shader-module (:pointer shader-module)))

(defvkfun ("vkCreateSharedSwapchainsKHR" create-shared-swapchains-khr) checked-result
  (device device)
  (swapchain-count :uint32)
  (p-create-infos (:pointer (:struct swapchain-create-info-khr))) ;; :LEN "swapchainCount" :EXTERNSYNC "pCreateInfos[].surface,pCreateInfos[].oldSwapchain"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-swapchains (:pointer swapchain-khr)) ;; :LEN "swapchainCount"
)

(defvkfun ("vkCreateSwapchainKHR" create-swapchain-khr) checked-result
  (device device)
  (p-create-info (:pointer (:struct swapchain-create-info-khr))) ;; :EXTERNSYNC "pCreateInfo.surface,pCreateInfo.oldSwapchain"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-swapchain (:pointer swapchain-khr)))

(defvkfun ("vkCreateWaylandSurfaceKHR" create-wayland-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct wayland-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkCreateWin32SurfaceKHR" create-win32-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct win32-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkCreateXcbSurfaceKHR" create-xcb-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct xcb-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkCreateXlibSurfaceKHR" create-xlib-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct xlib-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkDebugReportMessageEXT" debug-report-message-ext) :void
  (instance instance)
  (flags debug-report-flags-ext)
  (object-type debug-report-object-type-ext)
  (object :uint64)
  (location size-t)
  (message-code :int32)
  (p-layer-prefix (:pointer :char))
  (p-message (:pointer :char)))

(defvkfun ("vkDestroyBuffer" destroy-buffer) :void
  (device device)
  (buffer buffer) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyBufferView" destroy-buffer-view) :void
  (device device)
  (buffer-view buffer-view) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyCommandPool" destroy-command-pool) :void
  (device device)
  (command-pool command-pool) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyDebugReportCallbackEXT" destroy-debug-report-callback-ext) :void
  (instance instance)
  (callback debug-report-callback-ext) ;; :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyDescriptorPool" destroy-descriptor-pool) :void
  (device device)
  (descriptor-pool descriptor-pool) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyDescriptorSetLayout" destroy-descriptor-set-layout) :void
  (device device)
  (descriptor-set-layout descriptor-set-layout) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyDevice" destroy-device) :void
  (device device) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyEvent" destroy-event) :void
  (device device)
  (event event) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyFence" destroy-fence) :void
  (device device)
  (fence fence) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyFramebuffer" destroy-framebuffer) :void
  (device device)
  (framebuffer framebuffer) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyImage" destroy-image) :void
  (device device)
  (image image) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyImageView" destroy-image-view) :void
  (device device)
  (image-view image-view) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyInstance" destroy-instance) :void
  (instance instance) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyPipeline" destroy-pipeline) :void
  (device device)
  (pipeline pipeline) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyPipelineCache" destroy-pipeline-cache) :void
  (device device)
  (pipeline-cache pipeline-cache) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyPipelineLayout" destroy-pipeline-layout) :void
  (device device)
  (pipeline-layout pipeline-layout) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyQueryPool" destroy-query-pool) :void
  (device device)
  (query-pool query-pool) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyRenderPass" destroy-render-pass) :void
  (device device)
  (render-pass render-pass) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroySampler" destroy-sampler) :void
  (device device)
  (sampler sampler) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroySemaphore" destroy-semaphore) :void
  (device device)
  (semaphore semaphore) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroyShaderModule" destroy-shader-module) :void
  (device device)
  (shader-module shader-module) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroySurfaceKHR" destroy-surface-khr) :void
  (instance instance)
  (surface surface-khr) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDestroySwapchainKHR" destroy-swapchain-khr) :void
  (device device)
  (swapchain swapchain-khr) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkDeviceWaitIdle" device-wait-idle) checked-result
  (device device))

(defvkfun ("vkEndCommandBuffer" end-command-buffer) checked-result
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
)

(defvkfun ("vkEnumerateDeviceExtensionProperties" enumerate-device-extension-properties) checked-result
  (physical-device physical-device)
  (p-layer-name :string) ;; :OPTIONAL "true" :LEN "null-terminated"
  (p-property-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-properties (:pointer (:struct extension-properties))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(defvkfun ("vkEnumerateDeviceLayerProperties" enumerate-device-layer-properties) checked-result
  (physical-device physical-device) ;; :OPTIONAL "false,true"
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct layer-properties))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(defvkfun ("vkEnumerateInstanceExtensionProperties" enumerate-instance-extension-properties) checked-result
  (p-layer-name :string) ;; :OPTIONAL "true" :LEN "null-terminated"
  (p-property-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-properties (:pointer (:struct extension-properties))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(defvkfun ("vkEnumerateInstanceLayerProperties" enumerate-instance-layer-properties) checked-result
  (p-property-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-properties (:pointer (:struct layer-properties))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(defvkfun ("vkEnumeratePhysicalDevices" enumerate-physical-devices) checked-result
  (instance instance)
  (p-physical-device-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-physical-devices (:pointer physical-device)) ;; :OPTIONAL "true" :LEN "pPhysicalDeviceCount"
)

(defvkfun ("vkFlushMappedMemoryRanges" flush-mapped-memory-ranges) checked-result
  (device device)
  (memory-range-count :uint32)
  (p-memory-ranges (:pointer (:struct mapped-memory-range))) ;; :LEN "memoryRangeCount"
)

(defvkfun ("vkFreeCommandBuffers" free-command-buffers) :void
  (device device)
  (command-pool command-pool) ;; :EXTERNSYNC "true"
  (command-buffer-count :uint32)
  (p-command-buffers (:pointer command-buffer)) ;; :LEN "commandBufferCount" :NOAUTOVALIDITY "true" :EXTERNSYNC "true"
)

(defvkfun ("vkFreeDescriptorSets" free-descriptor-sets) checked-result
  (device device)
  (descriptor-pool descriptor-pool) ;; :EXTERNSYNC "true"
  (descriptor-set-count :uint32)
  (p-descriptor-sets (:pointer descriptor-set)) ;; :LEN "descriptorSetCount" :NOAUTOVALIDITY "true" :EXTERNSYNC "true"
)

(defvkfun ("vkFreeMemory" free-memory) :void
  (device device)
  (memory device-memory) ;; :OPTIONAL "true" :EXTERNSYNC "true"
  (p-allocator (:pointer (:struct allocation-callbacks))) ;; :OPTIONAL "true"
)

(defvkfun ("vkGetBufferMemoryRequirements" get-buffer-memory-requirements) :void
  (device device)
  (buffer buffer)
  (p-memory-requirements (:pointer (:struct memory-requirements))))

(defvkfun ("vkGetDeviceMemoryCommitment" get-device-memory-commitment) :void
  (device device)
  (memory device-memory)
  (p-committed-memory-in-bytes (:pointer device-size)))

(defvkfun ("vkGetDeviceProcAddr" get-device-proc-addr) pfn-void-function
  (device device)
  (p-name :string) ;; :LEN "null-terminated"
)

(defvkfun ("vkGetDeviceQueue" get-device-queue) :void
  (device device)
  (queue-family-index :uint32)
  (queue-index :uint32)
  (p-queue (:pointer queue)))

(defvkfun ("vkGetDisplayModePropertiesKHR" get-display-mode-properties-khr) checked-result
  (physical-device physical-device)
  (display display-khr)
  (p-property-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-properties (:pointer (:struct display-mode-properties-khr))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(defvkfun ("vkGetDisplayPlaneCapabilitiesKHR" get-display-plane-capabilities-khr) checked-result
  (physical-device physical-device)
  (mode display-mode-khr) ;; :EXTERNSYNC "true"
  (plane-index :uint32)
  (p-capabilities (:pointer (:struct display-plane-capabilities-khr))))

(defvkfun ("vkGetDisplayPlaneSupportedDisplaysKHR" get-display-plane-supported-displays-khr) checked-result
  (physical-device physical-device)
  (plane-index :uint32)
  (p-display-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-displays (:pointer display-khr)) ;; :OPTIONAL "true" :LEN "pDisplayCount"
)

(defvkfun ("vkGetEventStatus" get-event-status) checked-result
  (device device)
  (event event))

(defvkfun ("vkGetFenceStatus" get-fence-status) checked-result
  (device device)
  (fence fence))

(defvkfun ("vkGetImageMemoryRequirements" get-image-memory-requirements) :void
  (device device)
  (image image)
  (p-memory-requirements (:pointer (:struct memory-requirements))))

(defvkfun ("vkGetImageSparseMemoryRequirements" get-image-sparse-memory-requirements) :void
  (device device)
  (image image)
  (p-sparse-memory-requirement-count (:pointer :uint32))
  (p-sparse-memory-requirements (:pointer (:struct sparse-image-memory-requirements))) ;; :OPTIONAL "true" :LEN "pSparseMemoryRequirementCount"
)

(defvkfun ("vkGetImageSubresourceLayout" get-image-subresource-layout) :void
  (device device)
  (image image)
  (p-subresource (:pointer (:struct image-subresource)))
  (p-layout (:pointer (:struct subresource-layout))))

(defvkfun ("vkGetInstanceProcAddr" get-instance-proc-addr) pfn-void-function
  (instance instance) ;; :OPTIONAL "true"
  (p-name :string) ;; :LEN "null-terminated"
)

(defvkfun ("vkGetPhysicalDeviceDisplayPlanePropertiesKHR" get-physical-device-display-plane-properties-khr) checked-result
  (physical-device physical-device)
  (p-property-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-properties (:pointer (:struct display-plane-properties-khr))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(defvkfun ("vkGetPhysicalDeviceDisplayPropertiesKHR" get-physical-device-display-properties-khr) checked-result
  (physical-device physical-device)
  (p-property-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-properties (:pointer (:struct display-properties-khr))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(defvkfun ("vkGetPhysicalDeviceFeatures" get-physical-device-features) :void
  (physical-device physical-device)
  (p-features (:pointer (:struct physical-device-features))))

(defvkfun ("vkGetPhysicalDeviceFormatProperties" get-physical-device-format-properties) :void
  (physical-device physical-device)
  (format format)
  (p-format-properties (:pointer (:struct format-properties))))

(defvkfun ("vkGetPhysicalDeviceImageFormatProperties" get-physical-device-image-format-properties) checked-result
  (physical-device physical-device)
  (format format)
  (type image-type)
  (tiling image-tiling)
  (usage image-usage-flags)
  (flags image-create-flags) ;; :OPTIONAL "true"
  (p-image-format-properties (:pointer (:struct image-format-properties))))

(defvkfun ("vkGetPhysicalDeviceMemoryProperties" get-physical-device-memory-properties) :void
  (physical-device physical-device)
  (p-memory-properties (:pointer (:struct physical-device-memory-properties))))

(defvkfun ("vkGetPhysicalDeviceMirPresentationSupportKHR" get-physical-device-mir-presentation-support-khr) bool32
  (physical-device physical-device)
  (queue-family-index :uint32)
  (connection (:pointer mir-connection)))

(defvkfun ("vkGetPhysicalDeviceProperties" get-physical-device-properties) :void
  (physical-device physical-device)
  (p-properties (:pointer (:struct physical-device-properties))))

(defvkfun ("vkGetPhysicalDeviceQueueFamilyProperties" get-physical-device-queue-family-properties) :void
  (physical-device physical-device)
  (p-queue-family-property-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-queue-family-properties (:pointer (:struct queue-family-properties))) ;; :OPTIONAL "true" :LEN "pQueueFamilyPropertyCount"
)

(defvkfun ("vkGetPhysicalDeviceSparseImageFormatProperties" get-physical-device-sparse-image-format-properties) :void
  (physical-device physical-device)
  (format format)
  (type image-type)
  (samples sample-count-flag-bits)
  (usage image-usage-flags)
  (tiling image-tiling)
  (p-property-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-properties (:pointer (:struct sparse-image-format-properties))) ;; :OPTIONAL "true" :LEN "pPropertyCount"
)

(defvkfun ("vkGetPhysicalDeviceSurfaceCapabilitiesKHR" get-physical-device-surface-capabilities-khr) checked-result
  (physical-device physical-device)
  (surface surface-khr)
  (p-surface-capabilities (:pointer (:struct surface-capabilities-khr))))

(defvkfun ("vkGetPhysicalDeviceSurfaceFormatsKHR" get-physical-device-surface-formats-khr) checked-result
  (physical-device physical-device)
  (surface surface-khr)
  (p-surface-format-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-surface-formats (:pointer (:struct surface-format-khr))) ;; :OPTIONAL "true" :LEN "pSurfaceFormatCount"
)

(defvkfun ("vkGetPhysicalDeviceSurfacePresentModesKHR" get-physical-device-surface-present-modes-khr) checked-result
  (physical-device physical-device)
  (surface surface-khr)
  (p-present-mode-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-present-modes (:pointer present-mode-khr)) ;; :OPTIONAL "true" :LEN "pPresentModeCount"
)

(defvkfun ("vkGetPhysicalDeviceSurfaceSupportKHR" get-physical-device-surface-support-khr) checked-result
  (physical-device physical-device)
  (queue-family-index :uint32)
  (surface surface-khr)
  (p-supported (:pointer bool32)))

(defvkfun ("vkGetPhysicalDeviceWaylandPresentationSupportKHR" get-physical-device-wayland-presentation-support-khr) bool32
  (physical-device physical-device)
  (queue-family-index :uint32)
  (display (:pointer (:struct wl_display))))

(defvkfun ("vkGetPhysicalDeviceWin32PresentationSupportKHR" get-physical-device-win32-presentation-support-khr) bool32
  (physical-device physical-device)
  (queue-family-index :uint32))

(defvkfun ("vkGetPhysicalDeviceXcbPresentationSupportKHR" get-physical-device-xcb-presentation-support-khr) bool32
  (physical-device physical-device)
  (queue-family-index :uint32)
  (connection (:pointer xcb_connection_t))
  (visual_id xcb_visualid_t))

(defvkfun ("vkGetPhysicalDeviceXlibPresentationSupportKHR" get-physical-device-xlib-presentation-support-khr) bool32
  (physical-device physical-device)
  (queue-family-index :uint32)
  (dpy (:pointer display))
  (visual-id visual-id))

(defvkfun ("vkGetPipelineCacheData" get-pipeline-cache-data) checked-result
  (device device)
  (pipeline-cache pipeline-cache)
  (p-data-size (:pointer size-t)) ;; :OPTIONAL "false,true"
  (p-data (:pointer :void)) ;; :OPTIONAL "true" :LEN "pDataSize"
)

(defvkfun ("vkGetQueryPoolResults" get-query-pool-results) checked-result
  (device device)
  (query-pool query-pool)
  (first-query :uint32)
  (query-count :uint32)
  (data-size size-t)
  (p-data (:pointer :void)) ;; :LEN "dataSize"
  (stride device-size)
  (flags query-result-flags) ;; :OPTIONAL "true"
)

(defvkfun ("vkGetRenderAreaGranularity" get-render-area-granularity) :void
  (device device)
  (render-pass render-pass)
  (p-granularity (:pointer (:struct extent-2d))))

(defvkfun ("vkGetSwapchainImagesKHR" get-swapchain-images-khr) checked-result
  (device device)
  (swapchain swapchain-khr)
  (p-swapchain-image-count (:pointer :uint32)) ;; :OPTIONAL "false,true"
  (p-swapchain-images (:pointer image)) ;; :OPTIONAL "true" :LEN "pSwapchainImageCount"
)

(defvkfun ("vkInvalidateMappedMemoryRanges" invalidate-mapped-memory-ranges) checked-result
  (device device)
  (memory-range-count :uint32)
  (p-memory-ranges (:pointer (:struct mapped-memory-range))) ;; :LEN "memoryRangeCount"
)

(defvkfun ("vkMapMemory" map-memory) checked-result
  (device device)
  (memory device-memory) ;; :EXTERNSYNC "true"
  (offset device-size)
  (size device-size)
  (flags memory-map-flags) ;; :OPTIONAL "true"
  (pp-data (:pointer (:pointer :void))))

(defvkfun ("vkMergePipelineCaches" merge-pipeline-caches) checked-result
  (device device)
  (dst-cache pipeline-cache) ;; :EXTERNSYNC "true"
  (src-cache-count :uint32)
  (p-src-caches (:pointer pipeline-cache)) ;; :LEN "srcCacheCount"
)

(defvkfun ("vkQueueBindSparse" queue-bind-sparse) checked-result
  (queue queue) ;; :EXTERNSYNC "true"
  (bind-info-count :uint32) ;; :OPTIONAL "true"
  (p-bind-info (:pointer (:struct bind-sparse-info))) ;; :LEN "bindInfoCount" :EXTERNSYNC "pBindInfo[].pWaitSemaphores[],pBindInfo[].pSignalSemaphores[],pBindInfo[].pBufferBinds[].buffer,pBindInfo[].pImageOpaqueBinds[].image,pBindInfo[].pImageBinds[].image"
  (fence fence) ;; :OPTIONAL "true" :EXTERNSYNC "true"
)

(defvkfun ("vkQueuePresentKHR" queue-present-khr) checked-result
  (queue queue) ;; :EXTERNSYNC "true"
  (p-present-info (:pointer (:struct present-info-khr))) ;; :EXTERNSYNC "pPresentInfo.pWaitSemaphores[],pPresentInfo.pSwapchains[]"
)

(defvkfun ("vkQueueSubmit" queue-submit) checked-result
  (queue queue) ;; :EXTERNSYNC "true"
  (submit-count :uint32) ;; :OPTIONAL "true"
  (p-submits (:pointer (:struct submit-info))) ;; :LEN "submitCount" :EXTERNSYNC "pSubmits[].pWaitSemaphores[],pSubmits[].pSignalSemaphores[]"
  (fence fence) ;; :OPTIONAL "true" :EXTERNSYNC "true"
)

(defvkfun ("vkQueueWaitIdle" queue-wait-idle) checked-result
  (queue queue))

(defvkfun ("vkResetCommandBuffer" reset-command-buffer) checked-result
  (command-buffer command-buffer) ;; :EXTERNSYNC "true"
  (flags command-buffer-reset-flags) ;; :OPTIONAL "true"
)

(defvkfun ("vkResetCommandPool" reset-command-pool) checked-result
  (device device)
  (command-pool command-pool) ;; :EXTERNSYNC "true"
  (flags command-pool-reset-flags) ;; :OPTIONAL "true"
)

(defvkfun ("vkResetDescriptorPool" reset-descriptor-pool) checked-result
  (device device)
  (descriptor-pool descriptor-pool) ;; :EXTERNSYNC "true"
  (flags descriptor-pool-reset-flags) ;; :OPTIONAL "true"
)

(defvkfun ("vkResetEvent" reset-event) checked-result
  (device device)
  (event event) ;; :EXTERNSYNC "true"
)

(defvkfun ("vkResetFences" reset-fences) checked-result
  (device device)
  (fence-count :uint32)
  (p-fences (:pointer fence)) ;; :LEN "fenceCount" :EXTERNSYNC "true"
)

(defvkfun ("vkSetEvent" set-event) checked-result
  (device device)
  (event event) ;; :EXTERNSYNC "true"
)

(defvkfun ("vkUnmapMemory" unmap-memory) :void
  (device device)
  (memory device-memory) ;; :EXTERNSYNC "true"
)

(defvkfun ("vkUpdateDescriptorSets" update-descriptor-sets) :void
  (device device)
  (descriptor-write-count :uint32) ;; :OPTIONAL "true"
  (p-descriptor-writes (:pointer (:struct write-descriptor-set))) ;; :LEN "descriptorWriteCount" :EXTERNSYNC "pDescriptorWrites[].dstSet"
  (descriptor-copy-count :uint32) ;; :OPTIONAL "true"
  (p-descriptor-copies (:pointer (:struct copy-descriptor-set))) ;; :LEN "descriptorCopyCount" :EXTERNSYNC "pDescriptorCopies[].dstSet"
)

(defvkfun ("vkWaitForFences" wait-for-fences) checked-result
  (device device)
  (fence-count :uint32)
  (p-fences (:pointer fence)) ;; :LEN "fenceCount"
  (wait-all bool32)
  (timeout :uint64))

